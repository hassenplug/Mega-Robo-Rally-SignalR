-- MySQL Script generated by MySQL Workbench
-- Fri Apr 19 16:20:04 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema rally
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema rally
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `rally` DEFAULT CHARACTER SET utf8 ;
USE `rally` ;

-- -----------------------------------------------------
-- Table `rally`.`RobotBases`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotBases` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotBases` (
  `RobotBaseID` INT NOT NULL,
  `Port` VARCHAR(20) NULL DEFAULT 'COM00',
  `BatteryStatus` INT NULL,
  `MACID` VARCHAR(25) NULL,
  `DefaultBody` INT NULL,
  PRIMARY KEY (`RobotBaseID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotBodies`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotBodies` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotBodies` (
  `RobotBodyID` INT NOT NULL,
  `Name` VARCHAR(20) NULL DEFAULT 'Name',
  `Color` VARCHAR(6) NULL DEFAULT 'FFFFFF',
  `BodyActive` INT NULL,
  `ColorFG` VARCHAR(6) NULL DEFAULT '000000',
  PRIMARY KEY (`RobotBodyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotStatus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotStatus` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotStatus` (
  `RobotStatusID` INT NOT NULL,
  `Description` VARCHAR(20) NULL DEFAULT 'Unknown',
  `ShortDescription` VARCHAR(20) NULL DEFAULT 'Unknown',
  `Active` INT NULL,
  `Programming` INT NULL,
  `StatusColor` VARCHAR(8) NULL,
  `LEDColor` VARCHAR(8) NULL,
  PRIMARY KEY (`RobotStatusID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotShutDown`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotShutDown` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotShutDown` (
  `ShutDownID` INT NOT NULL,
  `Description` VARCHAR(20) NULL,
  `NextState` INT NULL,
  `RobotActiveState` INT NULL,
  PRIMARY KEY (`ShutDownID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`Robots`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`Robots` ;

CREATE TABLE IF NOT EXISTS `rally`.`Robots` (
  `RobotID` INT NOT NULL DEFAULT 0,
  `OperatorName` VARCHAR(20) NULL,
  `RobotBaseID` INT NULL DEFAULT 0,
  `RobotBodyID` INT NULL DEFAULT 0,
  `CurrentFlag` INT NULL DEFAULT 0,
  `Lives` INT NULL DEFAULT 3,
  `Damage` INT NULL DEFAULT 0,
  `ShutDown` INT NULL DEFAULT 0,
  `PositionValid` INT NULL DEFAULT 0,
  `Computer` INT NULL DEFAULT 0,
  `Score` INT NULL DEFAULT 0,
  `Status` INT NULL DEFAULT 0,
  `CurrentPosRow` INT NULL DEFAULT 0,
  `CurrentPosCol` INT NULL DEFAULT 0,
  `CurrentPosDir` INT NULL DEFAULT 0,
  `ArchivePosRow` INT NULL DEFAULT 0,
  `ArchivePosCol` INT NULL DEFAULT 0,
  `ArchivePosDir` INT NULL DEFAULT 0,
  `IsConnected` INT NULL DEFAULT 1,
  `RobotBatteries` INT NULL DEFAULT 0,
  `PhoneBatteries` INT NULL DEFAULT 0,
  `Priority` INT NULL DEFAULT 0,
  `Password` VARCHAR(10) NULL,
  `PlayerSeat` INT NULL DEFAULT 0,
  `Energy` INT NULL DEFAULT 3,
  `CardsDealt` VARCHAR(30) NULL,
  `CardsPlayed` VARCHAR(20) NULL,
  `MessageID` INT NULL DEFAULT 1,
  PRIMARY KEY (`RobotID`),
  INDEX `fk_Players_RobotBases_idx` (`RobotBaseID` ASC) VISIBLE,
  INDEX `fk_Players_RobotBodies1_idx` (`RobotBodyID` ASC) VISIBLE,
  INDEX `fk_Players_PlayerStatus1_idx` (`Status` ASC) VISIBLE,
  INDEX `fk_Robots_RobotShutdown_idx` (`ShutDown` ASC) VISIBLE,
  CONSTRAINT `fk_Players_RobotBases`
    FOREIGN KEY (`RobotBaseID`)
    REFERENCES `rally`.`RobotBases` (`RobotBaseID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Players_RobotBodies1`
    FOREIGN KEY (`RobotBodyID`)
    REFERENCES `rally`.`RobotBodies` (`RobotBodyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Players_PlayerStatus1`
    FOREIGN KEY (`Status`)
    REFERENCES `rally`.`RobotStatus` (`RobotStatusID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Robot_RobotShutDown`
    FOREIGN KEY (`ShutDown`)
    REFERENCES `rally`.`RobotShutDown` (`ShutDownID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`MoveCardTypes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`MoveCardTypes` ;

CREATE TABLE IF NOT EXISTS `rally`.`MoveCardTypes` (
  `CardTypeID` INT NOT NULL,
  `Description` VARCHAR(10) NULL,
  `ShortDescription` VARCHAR(1) NULL,
  `Value` INT NULL,
  `FileName` VARCHAR(10) NULL,
  PRIMARY KEY (`CardTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`MoveCardsCompleteList`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`MoveCardsCompleteList` ;

CREATE TABLE IF NOT EXISTS `rally`.`MoveCardsCompleteList` (
  `SetID` INT NOT NULL DEFAULT 1,
  `CardID` INT NOT NULL,
  `CardTypeID` INT NULL DEFAULT 0,
  PRIMARY KEY (`SetID`, `CardID`),
  INDEX `fk_MoveCardsCompleteList_MoveCardTypes1_idx` (`CardTypeID` ASC) VISIBLE,
  CONSTRAINT `fk_MoveCardsCompleteList_MoveCardTypes1`
    FOREIGN KEY (`CardTypeID`)
    REFERENCES `rally`.`MoveCardTypes` (`CardTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`MoveCards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`MoveCards` ;

CREATE TABLE IF NOT EXISTS `rally`.`MoveCards` (
  `CardID` INT NOT NULL DEFAULT 0,
  `CardTypeID` INT NULL DEFAULT -1,
  `Owner` INT NULL DEFAULT -1,
  `PhasePlayed` INT NULL DEFAULT 0,
  `Locked` INT NULL DEFAULT 0,
  `Random` INT NULL DEFAULT 0,
  `CurrentOrder` INT NULL DEFAULT 0,
  `Executed` INT NULL DEFAULT 0,
  `CardLocation` INT NULL DEFAULT 0,
  PRIMARY KEY (`CardID`, `Owner`),
  INDEX `fk_MoveCards_MoveCardTypes1_idx` (`CardTypeID` ASC) VISIBLE,
  CONSTRAINT `fk_MoveCards_MoveCardTypes1`
    FOREIGN KEY (`CardTypeID`)
    REFERENCES `rally`.`MoveCardTypes` (`CardTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`CurrentGameData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`CurrentGameData` ;

CREATE TABLE IF NOT EXISTS `rally`.`CurrentGameData` (
  `sKey` VARCHAR(45) NOT NULL,
  `iValue` INT NULL,
  `sValue` VARCHAR(45) NULL,
  `Category` VARCHAR(45) NULL,
  `iKey` INT NOT NULL,
  PRIMARY KEY (`sKey`),
  INDEX `secondary` (`iKey` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`CommandList`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`CommandList` ;

CREATE TABLE IF NOT EXISTS `rally`.`CommandList` (
  `CommandID` INT NOT NULL AUTO_INCREMENT,
  `Turn` INT NULL,
  `Phase` INT NULL,
  `CommandTypeID` INT NULL,
  `Parameter` INT NULL,
  `RobotID` INT NULL,
  `CommandSequence` INT NULL,
  `CommandSubSequence` INT NULL,
  `StatusID` INT NULL,
  `BTCommand` VARCHAR(10) NULL,
  `Description` VARCHAR(50) NULL,
  `PositionRow` INT NULL,
  `PositionCol` INT NULL,
  `PositionDir` INT NULL,
  `ParameterB` INT NULL DEFAULT 0,
  `CommandCatID` INT NULL,
  PRIMARY KEY (`CommandID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`CommandLookup`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`CommandLookup` ;

CREATE TABLE IF NOT EXISTS `rally`.`CommandLookup` (
  `CommandTypeID` INT NOT NULL,
  `CommandTypeDescription` VARCHAR(30) NULL,
  `CommandEnabled` INT NULL,
  PRIMARY KEY (`CommandTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`CommandStatusLookup`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`CommandStatusLookup` ;

CREATE TABLE IF NOT EXISTS `rally`.`CommandStatusLookup` (
  `StatusID` INT NOT NULL,
  `StatusDescription` VARCHAR(20) NULL,
  `StatusColor` VARCHAR(10) NULL,
  PRIMARY KEY (`StatusID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`GameState`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`GameState` ;

CREATE TABLE IF NOT EXISTS `rally`.`GameState` (
  `GameStateID` INT NOT NULL,
  `NextGameStateID` INT NULL,
  `GameStateDescription` VARCHAR(20) NULL,
  `WaitForUser` INT NULL,
  `AutoRefresh` INT NULL,
  `Continue` INT NULL,
  `BGColor` VARCHAR(10) NULL,
  `ButtonText` VARCHAR(25) NULL,
  PRIMARY KEY (`GameStateID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`BluetoothDongles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`BluetoothDongles` ;

CREATE TABLE IF NOT EXISTS `rally`.`BluetoothDongles` (
  `DongleID` INT NOT NULL,
  `DongleMAC` VARCHAR(20) NULL,
  `Active` INT NULL,
  PRIMARY KEY (`DongleID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`GameData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`GameData` ;

CREATE TABLE IF NOT EXISTS `rally`.`GameData` (
  `GameDataID` INT NOT NULL,
  `GameType` INT NULL DEFAULT 1,
  `TotalFlags` INT NULL DEFAULT 5,
  `LaserDamage` INT NULL DEFAULT 1,
  `BoardName` VARCHAR(200) NULL DEFAULT '-',
  `Description` VARCHAR(45) NULL DEFAULT 'Default',
  `GameCode` VARCHAR(12) NULL DEFAULT '-',
  `PhaseCount` INT NULL DEFAULT 5,
  `BoardCols` INT NULL DEFAULT 1,
  `BoardRows` INT NULL DEFAULT 1,
  `OptionCount` INT NULL DEFAULT -1,
  `BoardID` INT NULL DEFAULT 0,
  `PlayerListID` INT NULL DEFAULT 1,
  `RulesVersion` INT NULL DEFAULT 1,
  PRIMARY KEY (`GameDataID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotDirections`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotDirections` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotDirections` (
  `DirID` INT NOT NULL,
  `DirDescription` VARCHAR(10) NULL,
  `ShortDirDesc` VARCHAR(5) NULL,
  `NextDirection` INT NULL,
  PRIMARY KEY (`DirID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`OperatorData`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`OperatorData` ;

CREATE TABLE IF NOT EXISTS `rally`.`OperatorData` (
  `OperatorListID` INT NOT NULL,
  `RobotID` INT NOT NULL,
  `OperatorName` VARCHAR(45) NULL,
  `Paid` INT NULL DEFAULT 0,
  `RobotBodyID` INT NULL,
  `IsActive` INT NULL DEFAULT 1,
  `Password` VARCHAR(10) NULL,
  `PlayerSeat` INT NULL DEFAULT 5,
  `StartPosition` INT NULL,
  PRIMARY KEY (`OperatorListID`, `RobotID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`Options`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`Options` ;

CREATE TABLE IF NOT EXISTS `rally`.`Options` (
  `OptionID` INT NOT NULL,
  `Name` VARCHAR(45) NULL,
  `Text` VARCHAR(511) NULL,
  `SRR_Text` VARCHAR(511) NULL,
  `EditorType` INT NULL,
  `Quantity` INT NULL,
  `Damage` INT NULL,
  `ActionSequence` INT NULL,
  `CurrentOrder` INT NULL,
  `OptType` INT NULL,
  `Functional` INT NULL,
  PRIMARY KEY (`OptionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotOptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotOptions` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotOptions` (
  `RobotID` INT NOT NULL,
  `OptionID` INT NOT NULL,
  `DestroyWhenDamaged` INT NULL,
  `Quantity` INT NULL,
  `IsActive` INT NULL,
  `PhasePlayed` INT NULL,
  `DataValue` INT NULL,
  PRIMARY KEY (`RobotID`, `OptionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`GameTypes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`GameTypes` ;

CREATE TABLE IF NOT EXISTS `rally`.`GameTypes` (
  `GameType` INT NOT NULL,
  `Description` VARCHAR(45) NULL,
  `LaserDamage` INT NULL,
  `PhaseCount` INT NULL,
  `RuleVersion` INT NULL,
  PRIMARY KEY (`GameType`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`HistoryMoveCards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`HistoryMoveCards` ;

CREATE TABLE IF NOT EXISTS `rally`.`HistoryMoveCards` (
  `GameID` INT NOT NULL DEFAULT 0,
  `Turn` INT NOT NULL DEFAULT 0,
  `CardID` INT NOT NULL DEFAULT 0,
  `Owner` INT NOT NULL DEFAULT -1,
  `PhasePlayed` INT NULL DEFAULT 0,
  `Locked` INT NULL DEFAULT 0,
  PRIMARY KEY (`GameID`, `Turn`, `CardID`, `Owner`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`HistoryRobots`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`HistoryRobots` ;

CREATE TABLE IF NOT EXISTS `rally`.`HistoryRobots` (
  `GameID` INT NOT NULL DEFAULT 0,
  `Turn` INT NOT NULL DEFAULT 0,
  `RobotID` INT NOT NULL DEFAULT 0,
  `OperatorName` VARCHAR(20) NULL,
  `RobotBaseID` INT NULL DEFAULT 0,
  `RobotBodyID` INT NULL DEFAULT 0,
  `CurrentFlag` INT NULL DEFAULT 0,
  `Lives` INT NULL DEFAULT 3,
  `Damage` INT NULL DEFAULT 0,
  `ShutDown` INT NULL DEFAULT 0,
  `Computer` INT NULL DEFAULT 0,
  `Score` INT NULL DEFAULT 0,
  `Status` INT NULL DEFAULT 0,
  `CurrentPosRow` INT NULL DEFAULT 0,
  `CurrentPosCol` INT NULL DEFAULT 0,
  `CurrentPosDir` INT NULL DEFAULT 0,
  `ArchivePosRow` INT NULL DEFAULT 0,
  `ArchivePosCol` INT NULL DEFAULT 0,
  `ArchivePosDir` INT NULL DEFAULT 0,
  `Priority` INT NULL DEFAULT 0,
  PRIMARY KEY (`RobotID`, `Turn`, `GameID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`HistoryRobotOptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`HistoryRobotOptions` ;

CREATE TABLE IF NOT EXISTS `rally`.`HistoryRobotOptions` (
  `GameID` INT NOT NULL,
  `Turn` INT NOT NULL,
  `RobotID` INT NOT NULL,
  `OptionID` INT NOT NULL,
  `DestroyWhenDamaged` INT NULL,
  `Quantity` INT NULL,
  `IsActive` INT NULL,
  `PhasePlayed` INT NULL,
  `DataValue` INT NULL,
  PRIMARY KEY (`GameID`, `Turn`, `RobotID`, `OptionID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`PhaseCounter`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`PhaseCounter` ;

CREATE TABLE IF NOT EXISTS `rally`.`PhaseCounter` (
  `ID` INT NOT NULL,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`Boards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`Boards` ;

CREATE TABLE IF NOT EXISTS `rally`.`Boards` (
  `BoardID` INT NOT NULL,
  `BoardName` VARCHAR(45) NULL,
  `X` INT NULL DEFAULT 0,
  `Y` INT NULL DEFAULT 0,
  `GameType` INT NULL DEFAULT 1,
  `Players` INT NULL DEFAULT 6,
  `TotalFlags` INT NULL DEFAULT 4,
  `LaserDamage` INT NULL DEFAULT 1,
  `PhaseCount` INT NULL DEFAULT 5,
  `RulesVersion` INT NULL DEFAULT 1,
  PRIMARY KEY (`BoardID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`BoardItems`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`BoardItems` ;

CREATE TABLE IF NOT EXISTS `rally`.`BoardItems` (
  `BoardID` INT NOT NULL,
  `X` INT NOT NULL,
  `Y` INT NOT NULL,
  `SquareType` INT NULL,
  `Rotation` INT NULL,
  PRIMARY KEY (`BoardID`, `X`, `Y`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`BoardItemActions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`BoardItemActions` ;

CREATE TABLE IF NOT EXISTS `rally`.`BoardItemActions` (
  `BoardID` INT NOT NULL,
  `X` INT NOT NULL,
  `Y` INT NOT NULL,
  `SquareAction` INT NULL,
  `ActionSequence` INT NULL,
  `Phase` INT NULL,
  `Parameter` INT NULL)
ENGINE = InnoDB
COMMENT = '	';


-- -----------------------------------------------------
-- Table `rally`.`StatusLEDs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`StatusLEDs` ;

CREATE TABLE IF NOT EXISTS `rally`.`StatusLEDs` (
  `LEDID` INT NOT NULL,
  `R` INT NULL DEFAULT 0,
  `G` INT NULL DEFAULT 0,
  `B` INT NULL DEFAULT 0,
  `Sort` INT NULL DEFAULT 0,
  `Brightness` INT NULL DEFAULT 100,
  `Color` VARCHAR(6) NULL DEFAULT '000000',
  PRIMARY KEY (`LEDID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`BoardSquares`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`BoardSquares` ;

CREATE TABLE IF NOT EXISTS `rally`.`BoardSquares` (
  `ID` INT NOT NULL,
  `Name` VARCHAR(20) NULL,
  `Show` TINYINT(1) NULL DEFAULT 1,
  `ShowParameterID` INT NULL,
  `Filename` VARCHAR(45) NULL,
  `Rotation` INT NULL DEFAULT 0,
  PRIMARY KEY (`ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`CommandCategories`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`CommandCategories` ;

CREATE TABLE IF NOT EXISTS `rally`.`CommandCategories` (
  `CommandCatID` INT NOT NULL,
  `Description` VARCHAR(45) NULL,
  `RobotCommand` INT NULL,
  `DBCommand` INT NULL,
  `PiCommand` INT NULL,
  PRIMARY KEY (`CommandCatID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`SeatOrientation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`SeatOrientation` ;

CREATE TABLE IF NOT EXISTS `rally`.`SeatOrientation` (
  `SeatID` INT NOT NULL,
  `Direction` INT NULL,
  PRIMARY KEY (`SeatID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`MoveCardLocations`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`MoveCardLocations` ;

CREATE TABLE IF NOT EXISTS `rally`.`MoveCardLocations` (
  `LocationID` INT NOT NULL,
  `Description` VARCHAR(45) NULL,
  `DealPriority` INT NULL,
  PRIMARY KEY (`LocationID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`BoardSegmentList`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`BoardSegmentList` ;

CREATE TABLE IF NOT EXISTS `rally`.`BoardSegmentList` (
  `BoardID` INT NOT NULL,
  `X` INT NULL,
  `Y` INT NULL,
  `BoardSegmentID` INT NULL,
  `Rotation` INT NULL,
  PRIMARY KEY (`BoardID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotCommands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotCommands` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotCommands` (
  `CommandType` INT NOT NULL,
  `Value` INT NOT NULL,
  `Description` VARCHAR(45) NULL,
  PRIMARY KEY (`CommandType`, `Value`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`GameCommandList`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`GameCommandList` ;

CREATE TABLE IF NOT EXISTS `rally`.`GameCommandList` (
  `CommandID` INT NOT NULL,
  `CommandTiming` INT NULL,
  `CommandTypeID` INT NULL,
  `Description` VARCHAR(45) NULL,
  PRIMARY KEY (`CommandID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`GameCommandTiming`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`GameCommandTiming` ;

CREATE TABLE IF NOT EXISTS `rally`.`GameCommandTiming` (
  `TimingID` INT NOT NULL,
  `Description` VARCHAR(45) NULL,
  PRIMARY KEY (`TimingID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rally`.`RobotMessages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`RobotMessages` ;

CREATE TABLE IF NOT EXISTS `rally`.`RobotMessages` (
  `MessageID` INT NOT NULL,
  `Message` VARCHAR(45) NULL)
ENGINE = InnoDB;

USE `rally` ;

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewMoveCards`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewMoveCards` (`CardID` INT, `Desc` INT, `ShortDesc` INT, `Owner` INT, `PhasePlayed` INT, `Executed` INT, `Locked` INT, `FileName` INT, `Location` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewRobots`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewRobots` (`RobotID` INT, `RobotName` INT, `RobotColor` INT, `RobotColorFG` INT, `CurrentFlag` INT, `StatusColor` INT, `LEDColor` INT, `PlayerStatus` INT, `StatusID` INT, `X` INT, `Y` INT, `Dir` INT, `sDir` INT, `AX` INT, `AY` INT, `Score` INT, `OperatorName` INT, `PositionValid` INT, `Priority` INT, `ShutDown` INT, `Password` INT, `PlayerSeat` INT, `Energy` INT, `FlagEnergy` INT, `PlayerViewDirection` INT, `DirectionAdjustment` INT, `CardsDealt` INT, `CardsPlayed` INT, `StatusToShow` INT, `Message` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewCommandList`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewCommandList` (`CommandID` INT, `Turn` INT, `Phase` INT, `CommandCatID` INT, `CommandTypeID` INT, `Parameter` INT, `ParameterB` INT, `RobotID` INT, `CommandSequence` INT, `CommandSubSequence` INT, `StatusID` INT, `BTCommand` INT, `Description` INT, `PositionRow` INT, `PositionCol` INT, `PositionDir` INT, `CatDes` INT, `StatusDescription` INT, `StatusColor` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewOptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewOptions` (`OptionID` INT, `Name` INT, `SRR_Text` INT, `EditorType` INT, `Quantity` INT, `Damage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewRobotOptions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewRobotOptions` (`RobotID` INT, `OptionID` INT, `Name` INT, `SRR_Text` INT, `EditorType` INT, `DestroyWhenDamaged` INT, `Quantity` INT, `IsActive` INT, `PhasePlayed` INT, `DataValue` INT, `Damage` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewCurrentGame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewCurrentGame` (`sKey` INT, `iValue` INT, `sValue` INT, `Category` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewBoard`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewBoard` (`BoardID` INT, `BoardName` INT, `MaxX` INT, `MaxY` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewCommandListActive`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewCommandListActive` (`CommandID` INT, `Turn` INT, `Phase` INT, `CommandTypeID` INT, `Parameter` INT, `RobotID` INT, `CommandSequence` INT, `CommandSubSequence` INT, `StatusID` INT, `BTCommand` INT, `Description` INT, `PositionRow` INT, `PositionCol` INT, `PositionDir` INT, `ParameterB` INT, `CommandCatID` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewRobotsOld`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewRobotsOld` (`RobotID` INT, `RobotName` INT, `RobotColor` INT, `RobotColorFG` INT, `CurrentFlag` INT, `StatusColor` INT, `LEDColor` INT, `PlayerStatus` INT, `StatusID` INT, `X` INT, `Y` INT, `Dir` INT, `sDir` INT, `AX` INT, `AY` INT, `Score` INT, `OperatorName` INT, `PositionValid` INT, `Priority` INT, `ShutDown` INT, `Password` INT, `PlayerSeat` INT, `Energy` INT, `FlagEnergy` INT, `PlayerViewDirection` INT, `DirectionAdjustment` INT, `CardsDealt` INT, `CardsPlayed` INT, `StatusToShow` INT);

-- -----------------------------------------------------
-- Placeholder table for view `rally`.`viewRobotsMicro`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rally`.`viewRobotsMicro` (`RobotID` INT, `RobotName` INT, `RobotColor` INT, `RobotColorFG` INT, `CurrentFlag` INT, `StatusColor` INT, `LEDColor` INT, `PlayerStatus` INT, `StatusID` INT, `X` INT, `Y` INT, `Dir` INT, `sDir` INT, `AX` INT, `AY` INT, `Score` INT, `OperatorName` INT, `PositionValid` INT, `Priority` INT, `ShutDown` INT, `Password` INT, `PlayerSeat` INT, `Energy` INT, `FlagEnergy` INT, `PlayerViewDirection` INT, `DirectionAdjustment` INT, `CardsDealt` INT, `CardsPlayed` INT, `StatusToShow` INT, `Message` INT);

-- -----------------------------------------------------
-- procedure procMoveCardsShuffleAndDeal
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procMoveCardsShuffleAndDeal`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procMoveCardsShuffleAndDeal` ()
BEGIN
	# unlock all cards
	# lock cards based on damage
    # free all unlocked cards (and cards for inactive players)
    # shuffle
    # deal 
    # the code for "funcGetNextCard" contains code like this

	DECLARE bDone INT;
    DECLARE cards INT;
    DECLARE robot INT;
    DECLARE locked INT;
    DECLARE damage INT;
    DECLARE NewCardCount INT;
    DECLARE LastLockedCard INT;
    DECLARE lPhaseCount INT;
    DECLARE lOptionCards int;
    DECLARE lRulesVersion int;

    DECLARE curs CURSOR FOR  
		SELECT Robots.Damage as totalDamage,
			Robots.RobotID as rID
            
        FROM Robots inner join RobotStatus on Robots.`Status` = RobotStatus.RobotStatusID 
        WHERE RobotStatus.Programming = 1;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;
    
	select iValue into lRulesVersion from CurrentGameData where sKey="RulesVersion" ;

	#SET @disable_triggers = 1;
    
    #unlock all cards
	Update MoveCards Set MoveCards.`Locked` = if(CardLocation=4,1,0), `Executed` = 0, `Random` = 0;
    
    if ROW_COUNT() = 0 then 
		call procGameNewAddCards();
	end if;
    
	select iValue into lPhaseCount from CurrentGameData where sKey="PhaseCount" ;
    
    if lPhaseCount = 1 then 
		call procUpdatePlayerPriority();

		# deal cards based on player priority
		Update MoveCards Set PhasePlayed = -1;
        
        #10-int((card id-1)/7)
        Update MoveCards, Robots set Owner=RobotID where 10-FLOOR((CardID-1)/7)=Priority;
        #return 0;
	elseif lRulesVersion = 1 then
    
		#discard spam cards that were played to damage discard
        #delete from MoveCards where CardLocation = 5; #spam or haywire
        delete from MoveCards where CardLocation = 2 and CardTypeID=10; #spam or haywire
        
        #discard non spam cards
        update MoveCards
        set CardLocation = 3, PhasePlayed = 0
        where CardLocation = 1 or CardLocation = 2;
    
		# shuffle cards 
		Update MoveCards mc inner join MoveCardLocations mcl on mc.CardLocation = mcl.LocationID
        Set mc.Random = ROUND(500.0 * RAND() )+mcl.DealPriority*500,CurrentOrder = 0  ;
        
        #put cards in order
		Update MoveCards m1 inner join
		(
			Select mc.CardID, mc.Owner, count(mc.CardID) as cnt, mc.CardLocation  from MoveCards mc 
			inner join MoveCards mc2 on mc.Owner = mc2.Owner and (mc.Random >mc2.Random or (mc.Random=mc2.Random and mc.CardID >= mc2.CardID))
			group by mc.CardID, mc.Owner , mc.CardLocation
		order by mc.Owner, cnt
		) ij
		on m1.Owner = ij.Owner and m1.CardID=ij.CardID
		set m1.CurrentOrder = ij.cnt;

        #if player has < 9, move discard to deck for that list of players
        Update MoveCards m0 inner join (select Owner from MoveCards where CardLocation = 0 group by Owner having Count(CardID)<9) lt9
		on m0.Owner = lt9.Owner 
		set CardLocation = 0
        where CardLocation = 3;

        #deal 9 from deck for anyone who needs cards
        Update MoveCards set CardLocation = 1 where CurrentOrder <= 9;

		update Robots rb inner join (	select mc.Owner, GROUP_CONCAT(mc.CardTypeID order by mc.CardTypeID desc) gctl
			from MoveCards mc 
			where mc.CardLocation =1
			group by mc.Owner) ctl on rb.RobotID = ctl.Owner
		set CardsDealt = ctl.gctl, CardsPlayed = "0,0,0,0,0";        
        
	else


		# deal a full hand to each player...  then...
        
		OPEN curs;
		SET bDone = 0;
		REPEAT
			FETCH curs INTO damage,robot;

			if damage > 4 then
				set LastLockedCard = 10 - damage;
                
                #check to make sure hand is full of cards
                select Count(CardID) into NewCardCount from MoveCards where `Owner` = robot;
                if NewCardCount < 5 then
					Update MoveCards set `Owner` = robot, Random=1 where `Owner` = -1 order by CurrentOrder, CardID limit 5;
					call procGameFillPrograms();
                end if;
			else
				set LastLockedCard = 6;
			end if;
			
			#update Robots set `Status` = NewStatus where RobotID = robot;
			Update MoveCards set MoveCards.`Locked` = 1 where `Owner` = robot and PhasePlayed >= LastLockedCard and PhasePlayed < 6;
		UNTIL bDone END REPEAT;
		CLOSE curs;    

		Update MoveCards Set MoveCards.CurrentOrder = ROUND(500.0 * RAND() ), `Owner` = -1, PhasePlayed = -1, Random = 0  where MoveCards.`Locked` = 0 and PhasePlayed < 6;
		
		# deal
		
		OPEN curs;
		SET bDone = 0;
		REPEAT
			FETCH curs INTO damage,robot;

			set lOptionCards = 0;
            Select ifnull(Sum(Quantity),0) into lOptionCards from RobotOptions where RobotID = robot and (OptionID=16); # or OptionID=54);
            
			set NewCardCount = 9 - damage + lOptionCards;
            
			if bDone = 0 then 

				while NewCardCount > 0 do
					Update MoveCards set `Owner` = robot where `Owner` = -1 order by CurrentOrder, CardID limit 1;
					set NewCardCount = NewCardCount -1 ;
				end while;
			end if;
			
		UNTIL bDone END REPEAT;
		CLOSE curs;    
		#SET @disable_triggers = NULL;
		call procMoveCardsCheckProgrammed();
	end if ;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procGameNew
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procGameNew`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procGameNew` ()
BEGIN
    declare iFlags int;
    
    call procResetGame();
        
    insert into Robots (RobotID, OperatorName, RobotBaseID, RobotBodyID, `Status`, Priority, `Password`,
		CurrentPosCol,CurrentPosRow,CurrentPosDir,ArchivePosCol,ArchivePosRow,ArchivePosDir,PlayerSeat)	
    Select  RobotID, OperatorName, RobotID, RobotBodyID, 1, OperatorData.PlayerSeat, `Password` , 
		ba.X, ba.Y, bi.Rotation, ba.X, ba.Y, bi.Rotation,OperatorData.PlayerSeat
    from OperatorData 
    inner join BoardItemActions ba on OperatorData.StartPosition = ba.Parameter 
		and ba.SquareAction = 19  #start square
	inner join BoardItems bi on bi.X = ba.X and bi.Y = ba.Y 
    inner join CurrentGameData pl on OperatorData.OperatorListID = pl.iValue and pl.sKey = "PlayerListID"
    inner join CurrentGameData bl on ba.BoardID = bl.iValue and bi.BoardID = bl.iValue and bl.sKey = "BoardID"
    where IsActive>0 ;
    
    select count(*) into iFlags from BoardItems bi inner join CurrentGameData cg on bi.BoardID=cg.iValue and cg.sKey = "BoardID" and bi.SquareType=100;
    
	update CurrentGameData set iValue=iFlags where sKey='TotalFlags';
   
    #call procRobotConnectionStatus(robotID,70)
	#call procDealOptionToRobot(robotID)
   
    insert into StatusLEDs (LEDID, Color, Sort) #, R, G, B, Sort)
    #values (1,255,255,255,1);
    select RobotID, '000000',RobotID from Robots limit 8;
    #select RobotID, 255,255,255,RobotID from Robots limit 8;
    
    #shuffle option cards
    Update `Options` set CurrentOrder = ROUND(100.0 * RAND() );
    # deal options to players
    
    
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procMoveCardsCheckProgrammed
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procMoveCardsCheckProgrammed`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procMoveCardsCheckProgrammed` ()
BEGIN
	# check player cards to see if ready to execute
    # if so, set game state to ... 8
	
    # check all active robots; see if they have five cards programmed
	DECLARE bDone INT;
    DECLARE cards INT;
    DECLARE programmed INT;
    DECLARE locked INT;
    DECLARE robot INT;
    DECLARE cstatus INT;
    
    DECLARE NewStatus INT;
    DECLARE NextGameState INT;
    DECLARE IncompleteRobots INT;
    DECLARE RequiredCards INT;

    
    DECLARE curs CURSOR FOR  
		SELECT count(CardID) as countCards, 
			sum(if(MoveCards.PhasePlayed > 0 && MoveCards.PhasePlayed < 6,1,0)) as countProgrammed,
			sum(if(MoveCards.Locked > 0,1,0)) as countLocked,
            Robots.RobotID as rID,
            Robots.`Status` as CurrentStatus
            
        FROM Robots inner join RobotStatus on Robots.`Status` = RobotStatus.RobotStatusID 
        inner join MoveCards on Robots.RobotID = MoveCards.`Owner`
        WHERE RobotStatus.Programming = 1
        Group By rID, CurrentStatus;
        
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET bDone = 1;
    
    set NextGameState = 8; # ready to run
    set IncompleteRobots = 0;
    
	select iValue into RequiredCards from CurrentGameData where sKey="PhaseCount" ;
    
    OPEN curs;

	SET bDone = 0;
	REPEAT
		FETCH curs INTO cards,programmed,locked, robot, cstatus;

		set NewStatus = 0;
        
		IF cards < 5 then
			set NewStatus = 1; # waiting for cards, player does not have cards in hand to program
		elseif programmed = RequiredCards then
			set NewStatus = 4; # ready to run
		elseif programmed > locked then
			set NewStatus = 3; # programming
		else
			set NewStatus = 2; # ready to program
		END IF;
        
        if (NewStatus <> 4) then 
			Set IncompleteRobots = IncompleteRobots + 1;
        end if;
        
        if cstatus != NewStatus then 
			update Robots set `Status` = NewStatus where RobotID = robot;
		end if;
	UNTIL bDone END REPEAT;

	CLOSE curs;    
    
    #if (IncompleteRobots = 0) then 
	#	Update CurrentGameData set ProgramsReady = 1; # set to programmed
	#else
	#	Update CurrentGameData set ProgramsReady = 0; # NOT set to programmed
    #end if;
    
    #3,4,5
	select iValue into cstatus from CurrentGameData where sKey="GameState" ;
    #if ((cstatus=3) or (cstatus=4)) then 
	#	call procGameNextState();
    #end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procGameFillPrograms
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procGameFillPrograms`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procGameFillPrograms` ()
BEGIN
	DECLARE tRobot INT;
	DECLARE tPhase INT;
	DECLARE tCard INT;
	DECLARE tRows INT;
	DECLARE tCounter INT;

   	#SET @disable_triggers = 1;
    set tCounter = 0;

	REPEAT
		#select RobotID into tRobot from Robots left join MoveCards on Robots.RobotID = MoveCards.Owner
        
		SELECT RobotID, PhaseID
		FROM MoveCards RIGHT JOIN (SELECT Robots.RobotID, PhaseCounter.ID as PhaseID
		FROM PhaseCounter, Robots) as AllRobotPhases ON (MoveCards.PhasePlayed = AllRobotPhases.PhaseID) AND (MoveCards.Owner = AllRobotPhases.RobotID)
		WHERE (((MoveCards.CardID) Is Null)) limit 1 into tRobot, tPhase;
		
        if (ROW_COUNT() > 0) then 
			Select CardID from MoveCards where Owner=tRobot and PhasePlayed = -1 order by CurrentOrder, CardID limit 1 into tCard;
		
			Update MoveCards set PhasePlayed = tPhase, Random = 1 where CardID=tCard;    
		end if;
        
		#call funcLogData("Program: " & tRobot & " " & tPhase & " " & tCard);
        set tRows = ROW_COUNT();
        set tCounter = tCounter+1;
        if (tCounter > 300) then # bail out after 300 tries
			set tRows = 0;
		end if;
        
        
	UNTIL tRows=0 END REPEAT;
   	#SET @disable_triggers = NULL;
    call procMoveCardsCheckProgrammed();

 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procGameNewAddCards
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procGameNewAddCards`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procGameNewAddCards` ()
BEGIN
	DECLARE NewsetID int DEFAULT 1;
	DECLARE playercount int DEFAULT 8;
	DECLARE lPhaseCount int DEFAULT 5;
	DECLARE RulesVersion int ;
    
   	# Clear cards
	Delete from MoveCards;

    select count(*) from Robots into playercount;
    if playercount > 8 then 
		set NewsetID = 2;
    end if ;
    
	select iValue into lPhaseCount from CurrentGameData where sKey="PhaseCount" ;
    if lPhaseCount = 1 then # players only program one card/turn
		set NewsetID = 3;
    end if ;

	select iValue into RulesVersion from CurrentGameData where sKey="RulesVersion" ;
    if RulesVersion = 1 then
		set NewsetID = 4;
		Insert into MoveCards (CardID, CardTypeID,`Owner`,CardLocation)
		select CardID, CardTypeID, Robots.RobotID, 0 
		from MoveCardsCompleteList, Robots where SetID = NewsetID;
	else
		# normal deck for rules version 0
		Insert into MoveCards (CardID, CardTypeID)
		select CardID, CardTypeID 
		from MoveCardsCompleteList where SetID = NewsetID;
    end if;        
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcGetProgramReadyState
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcGetProgramReadyState`;

DELIMITER $$
USE `rally`$$
CREATE FUNCTION `funcGetProgramReadyState` ()
RETURNS INT 
BEGIN
	DECLARE cResult INT;

	#Verify Position
	select count(*) into cResult from Robots where PositionValid=0 ;
	if cResult = 0 then
    
		#Check Programs
		Select Count(*) into cResult from Robots where (Status <> 4 and Status < 9) ; # not programmed & still active
		if cResult = 0 then # all robots programmed
			return 5; # robots are programmed
		else
			return 4; # wait...
		end if ;
	else
		return 3;
	end if;
    
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procResetPlayers
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procResetPlayers`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procResetPlayers` ()
BEGIN
# set players with "superior archive" option first.
# set KotH players to 0 damage
	declare useDamage INT;
    declare pcnd INT;
    declare RulesVersion INT;
    
	select iValue into useDamage from CurrentGameData where sKey="LaserDamage" ;
	#select iValue into pcnd from CurrentGameData where sKey="PlayersCanNotDie" ;
	select iValue into RulesVersion from CurrentGameData where sKey="RulesVersion" ;
    
    set useDamage = useDamage * 2;

	#update shutdown status
	update Robots inner join RobotShutDown on Robots.`ShutDown`=RobotShutDown.ShutDownID 
    Set `ShutDown` =  NextState # , Status= RobotActiveState;
    where Robots.`ShutDown` > 0;    
    
    # circuit breaker
    Update Robots inner join RobotOptions on Robots.RobotID = RobotOptions.RobotID and RobotOptions.OptionID = 9 set ShutDown = 4 where Damage >= 3;
    
    update Robots set Status=2 where ShutDown=0;

	Update Robots set Damage = 10, ShutDown=0, Lives = Lives -1, Status=11
		where Damage > 9 or Status=11;
        
	Update Robots set Lives=1 where pcnd=1 and Lives=0;
    
    # remove cards from players that are dead or shut down
    Update MoveCards inner join Robots on MoveCards.Owner = Robots.RobotID 
		set PhasePlayed = 0, Owner = -1 where PhasePlayed > 5 and (Robots.Status = 11 or Robots.ShutDown > 0);

# set players with "superior archive" option first. 49 = superior archive option
	Update Robots inner join RobotOptions on Robots.RobotID = RobotOptions.RobotID and RobotOptions.OptionID = 49
		set Damage=0, 
		ShutDown=0, 
		CurrentPosRow=ArchivePosRow, CurrentPosCol=ArchivePosCol, CurrentPosDir=ArchivePosDir, 
        Status=1, 
		PositionValid=0
		where Status=11 and Lives > 0;
	
    # move current position to archive for robots that died
	Update Robots 
		set Damage=useDamage, 
		ShutDown=0, 
		CurrentPosRow=ArchivePosRow, CurrentPosCol=ArchivePosCol, CurrentPosDir=ArchivePosDir, 
        Status=1, 
		PositionValid=0
		where Status=11 and Lives > 0;
        
	Update RobotOptions set PhasePlayed = 0;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procKickstart
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procKickstart`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procKickstart` ()
BEGIN

	Update CurrentGameData set iValue = 8 where sKey="GameState";
	call procCommandUpdateStatus(-1,0);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procVerifyPosition
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procVerifyPosition`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procVerifyPosition` (IN p_Robot int)
BEGIN
	# check to make sure no robots are in the same spot...
	#Select count(RobotID) into broken from Robots ;
	declare Passed INT;
    declare invalid int ;
    declare posRow int ;
    declare posCol int ;
    declare posDir int ;
    
    Set Passed = 1;
    
	Select CurrentPosRow, CurrentPosCol, CurrentPosDir into posRow, posCol, posDir from Robots  where RobotID = p_Robot ;
    Select count(RobotID)  into invalid from Robots where CurrentPosRow = posRow && CurrentPosCol = posCol;
    
    if (posDir=0 || posRow = 0 || posCol = 0 || invalid > 1) then
		set Passed = 0;
	end if ;
    
    update Robots set PositionValid=Passed where RobotID = p_Robot;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procRobotConnectionStatus
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procRobotConnectionStatus`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procRobotConnectionStatus` (IN p_Robot int, in p_connection int)
BEGIN
	DECLARE cCommandID INT;

# 70 = connect
# 71 = disconnect
# find if there is an existing command,
	select CommandID
		into cCommandID
		from CommandList where CommandTypeID = p_connection and RobotID=p_Robot;

# if not, add one
	if (cCommandID is null) then 
		insert into CommandList (GameDataID, Turn, Phase, CommandSequence,  
                 CommandTypeID, RobotID, StatusID, Description) 
                 values (1, 0, 0, p_Robot, p_connection, p_Robot, 1, "Connection");
                 
		select CommandID
			into cCommandID
			from CommandList where CommandTypeID = p_connection and RobotID=p_Robot;
            /*
		if (cCommandID =0) then 
			insert into CommandList (CommandID, GameDataID, Turn, Phase, CommandSequence,  
					 CommandTypeID, RobotID, StatusID, Description) 
					 values (0, 1, 0, 0, p_Robot, p_connection, p_Robot, 1, "Connection");
			select CommandID
				into cCommandID
				from CommandList where CommandTypeID = p_connection and RobotID=p_Robot;
        end if;
        */
    end if;
# set it to ready

	call procCommandUpdateStatus(cCommandID, 2);
	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcGetNextOption
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcGetNextOption`;

DELIMITER $$
USE `rally`$$
CREATE FUNCTION `funcGetNextOption`(p_RobotID int)
RETURNS INT 
BEGIN
	DECLARE cOptionID INT;
    
    #select First option 
	Select Options.OptionID into cOptionID from `Options`
		left join (Select * from RobotOptions where RobotID=p_RobotID) as RO
        on `Options`.OptionID=RO.OptionID 
        where isnull(`RO`.RobotID) and Options.Functional>7
        order by CurrentOrder 
        limit 1;    
	
    Update Options set CurrentOrder = CurrentOrder+100 where OptionID = cOptionID;

	return cOptionID;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procCurrentPosSave
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procCurrentPosSave`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procCurrentPosSave` ()
BEGIN
	# Save the current game state to History
	DECLARE iGameID INT;
    DECLARE iTurn INT;
    
    #select GameID, Turn from CurrentGameData into iGameID, iTurn ;
	select iValue into iGameID from CurrentGameData where sKey="GameDataID" ;
	select iValue into iTurn from CurrentGameData where sKey="Turn" ;

    
    delete from HistoryRobots where GameID = iGameID and Turn = iTurn;
    
    insert into HistoryRobots (GameID, Turn, RobotID, OperatorName, RobotBaseID, RobotBodyID, 
		CurrentFlag, Lives, Damage, `ShutDown`, Computer, Score, `Status`,
        CurrentPosRow, CurrentPosCol, CurrentPosDir,
        ArchivePosRow, ArchivePosCol, ArchivePosDir, Priority)
    select iGameID, iTurn, RobotID, OperatorName, RobotBaseID, RobotBodyID, 
		CurrentFlag, Lives, Damage, `ShutDown`, Computer, Score, `Status`,
        CurrentPosRow, CurrentPosCol, CurrentPosDir,
        ArchivePosRow, ArchivePosCol, ArchivePosDir, Priority
    from Robots;
    
    delete from HistoryMoveCards where GameID = iGameID and Turn = iTurn;

	insert into HistoryMoveCards (GameID, Turn, CardID, `Owner`, PhasePlayed, Locked)
    Select iGameID, iTurn, CardID, `Owner`, PhasePlayed, Locked
    from MoveCards where `Owner`>0;
    
    delete from HistoryRobotOptions where GameID = iGameID and Turn = iTurn;

    Insert into HistoryRobotOptions (GameID, Turn, RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive, PhasePlayed, DataValue)
    Select iGameID, iTurn, RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive, PhasePlayed, DataValue
    From RobotOptions;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procCurrentPosLoad
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procCurrentPosLoad`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procCurrentPosLoad` ()
BEGIN
    # Load players from History
	DECLARE iGameID INT;
    DECLARE iTurn INT;
    
    #select GameID, Turn from CurrentGameData into iGameID, iTurn ;
	select iValue into iGameID from CurrentGameData where sKey="GameDataID" ;
	select iValue into iTurn from CurrentGameData where sKey="Turn" ;
    
    call procResetGame();
    
    insert into Robots (RobotID, OperatorName, RobotBaseID, RobotBodyID, 
		CurrentFlag, Lives, Damage, `ShutDown`, Computer, Score, `Status`,
        CurrentPosRow, CurrentPosCol, CurrentPosDir,
        ArchivePosRow, ArchivePosCol, ArchivePosDir, Priority, PositionValid)
    select RobotID, OperatorName, RobotBaseID, RobotBodyID, 
		CurrentFlag, Lives, Damage, `ShutDown`, Computer, Score, `Status`,
        CurrentPosRow, CurrentPosCol, CurrentPosDir,
        ArchivePosRow, ArchivePosCol, ArchivePosDir, Priority, 0
    from HistoryRobots where GameID = iGameID and Turn = iTurn;
    
	call procGameNewAddCards();

	#insert into MoveCards (CardID, `Owner`, PhasePlayed, Locked)
    #Select CardID, `Owner`, PhasePlayed, Locked
    #from HistoryMoveCards where GameID = iGameID and Turn = iTurn;
   	update MoveCards
    inner join HistoryMoveCards on MoveCards.CardID = HistoryMoveCards.CardID
    set MoveCards.`Owner` = HistoryMoveCards.`Owner`, 
	  MoveCards.PhasePlayed = HistoryMoveCards.PhasePlayed, 
	  MoveCards.Locked = HistoryMoveCards.Locked 
      where HistoryMoveCards.GameID = iGameID and HistoryMoveCards.Turn = iTurn;
    
    Insert into RobotOptions (RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive, PhasePlayed, DataValue)
    Select RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive, PhasePlayed, DataValue
    From HistoryRobotOptions  where GameID = iGameID and Turn = iTurn;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procResetGame
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procResetGame`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procResetGame` ()
BEGIN
    # load game board
	DECLARE iGameID INT;
    declare iCols int;
    declare iRows int;
    declare iFlags int;
    declare iPlayers int;
    declare iBoardID int;
    #DECLARE iGameType INT;
    #DECLARE iLaserDamage INT;
    #DECLARE iPhaseCount INT;
    #Declare cOptionCount int;
    
    select iValue into iGameID from CurrentGameData where sKey = 'GameDataID';
    
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID
		set CurrentGameData.iValue = 
			if (CurrentGameData.sKey = 'GameType',GameData.GameType,
				if (CurrentGameData.sKey = 'LaserDamage',GameData.LaserDamage,
					if(CurrentGameData.sKey = 'PhaseCount',GameData.PhaseCount,
						if(CurrentGameData.sKey = 'BoardID',GameData.BoardID,
							if(CurrentGameData.sKey = 'BoardCols',GameData.BoardCols,
								if(CurrentGameData.sKey = 'BoardRows',GameData.BoardRows,
									if(CurrentGameData.sKey = 'OptionCount',GameData.OptionCount,
										if(CurrentGameData.sKey = 'TotalFlags',GameData.TotalFlags,
											if(CurrentGameData.sKey = 'RulesVersion',GameData.RulesVersion,
												if(CurrentGameData.sKey = 'PlayerListID',GameData.PlayerListID,
													CurrentGameData.iValue
												)
											)
										)
									)
								)
							)
						)
					)
                )
			);

/*    
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.GameType where CurrentGameData.sKey = 'GameType';
    
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.LaserDamage where CurrentGameData.sKey = 'LaserDamage';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.PhaseCount where CurrentGameData.sKey = 'PhaseCount';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.BoardID where CurrentGameData.sKey = 'BoardID';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.BoardCols where CurrentGameData.sKey = 'BoardCols';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.BoardRows where CurrentGameData.sKey = 'BoardRows';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.OptionCount where CurrentGameData.sKey = 'OptionCount';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.TotalFlags where CurrentGameData.sKey = 'TotalFlags';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.PlayerListID where CurrentGameData.sKey = 'PlayerListID';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.BoardRows where CurrentGameData.sKey = 'BoardRows';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.BoardCols where CurrentGameData.sKey = 'BoardCols';
        
    update CurrentGameData inner join GameData on GameData.GameDataID = iGameID 
		set CurrentGameData.iValue = GameData.PlayerListID where CurrentGameData.sKey = 'PlayerListID';
  */      
            
    delete from MoveCards;
    delete from CommandList;
    delete from RobotOptions;
    delete from StatusLEDs;
    
    # add players
    Delete from Robots;
    

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procUpdateCardPlayed
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procUpdateCardPlayed`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procUpdateCardPlayed` (IN p_Player int , in p_CardTypeID int, in p_PhasePlayed int)
#CREATE PROCEDURE `procUpdateCardPlayed` (IN p_CardID int, in p_PhasePlayed int, in p_Player int)
BEGIN
    DECLARE inProgramming INT;
    DECLARE NewStatus INT;
    DECLARE PhaseCount INT;
    DECLARE ProgramCount INT;
    DECLARE TargetPhase int;
    declare vCardID int;
    
	select Programming from Robots inner join RobotStatus on Robots.Status = RobotStatus.RobotStatusID 
		where Robots.RobotID=p_Player into inProgramming;
		
	if inProgramming = 1 then 
		set vCardID = -1;
		select iValue into PhaseCount from CurrentGameData where sKey="PhaseCount" ;
        
        if p_PhasePlayed = -1 then # no target
            Select min(pc.ID) into p_PhasePlayed from PhaseCounter pc left join MoveCards mc on pc.ID = mc.PhasePlayed and mc.Owner = p_Player where mc.CardTypeID is null; 
            # no place to play this card
            if p_PhasePlayed is null or p_PhasePlayed > PhaseCount then 
				set p_PhasePlayed = -1;
                set p_CardTypeID = 0;
            end if;
        end if;
        
        if p_CardTypeID > 0 then
			select min(CardID) into vCardID from MoveCards where `Owner`= p_Player and CardLocation=1 and CardTypeID=p_CardTypeID; #group by `Owner`, CardLocation,CardTypeID;
            if vCardID is null then 
				set vCardID = -1;
			end if;
        end if;
        
		#Update Robots set `Status` = NewStatus where RobotID = p_Player;
		Update MoveCards set PhasePlayed = -1,CardLocation = 1 where `Owner` = p_Player and PhasePlayed=p_PhasePlayed and CardLocation=2;
		Update MoveCards set PhasePlayed = p_PhasePlayed, CardLocation=2 where `Owner` = p_Player and  CardID = vCardID and CardLocation=1 ;
		
		#call procMoveCardsCheckOne(p_Player);
        set NewStatus = 3;
        
		select count(*) as p into ProgramCount from MoveCards where `Owner` = p_Player and CardLocation = 2;  #group by `Owner`;
        if PhaseCount = ProgramCount then
			set NewStatus = 4;
        end if;
        
        call procUpdateRobotCards(p_Player);
                
		Update Robots set `Status` = NewStatus where RobotID = p_Player;
        
	end if ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procDealOptionToRobot
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procDealOptionToRobot`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procDealOptionToRobot` (IN p_RobotID int)
BEGIN
	DECLARE cOptionID INT;
    DECLARE cQuantity INT;
    
    #select First option 
	Select Options.OptionID into cOptionID from `Options`
		left join (Select * from RobotOptions where RobotID=p_RobotID) as RO
        on `Options`.OptionID=RO.OptionID 
        where isnull(`RO`.RobotID) and Options.Functional>7
        order by CurrentOrder 
        limit 1;    
        
	if cOptionID > 0 then
		insert into RobotOptions (RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive,PhasePlayed,DataValue)
		Select  p_RobotID, OptionID, false, Quantity, false, 0, if(EditorType=6,1,0) from `Options` where OptionID=cOptionID;
		# this sets the direction of options
	else
		# if cOptionID is null (0), look for options with quantity > -1
		Select Options.OptionID, Options.Quantity into cOptionID, cQuantity from `Options`
			where Options.Quantity > -1 and Options.Functional>7 
			order by CurrentOrder 
			limit 1;    
        if cQuantity > 0 then
			update RobotOptions set Quantity = Quantity + cQuantity where RobotID=p_RobotID and OptionID=cOptionID;
        else
			# same as above
			insert into RobotOptions (RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive,PhasePlayed,DataValue)
			Select  p_RobotID, OptionID, false, Quantity, false, 0, if(EditorType=6,1,0) from `Options` where OptionID=cOptionID;
        end if;
	end if;
    Update Options set CurrentOrder = CurrentOrder+100 where OptionID = cOptionID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procMoveCardsCheckOne
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procMoveCardsCheckOne`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procMoveCardsCheckOne` (in p_Player int)
BEGIN
    DECLARE RequiredCards INT;
    DECLARE cards INT;
    DECLARE programmed INT;
    DECLARE locked INT;
    
    DECLARE NewStatus INT;
    DECLARE cstatus INT;

	select iValue into RequiredCards from CurrentGameData where sKey="PhaseCount" ;
	
	select count(CardID),
		sum(if(MoveCards.PhasePlayed > 0 && MoveCards.PhasePlayed < 6,1,0)) ,
		sum(if(MoveCards.Locked > 0,1,0)) 
		into cards, programmed, locked
		from MoveCards where Owner = p_Player;
		
	set NewStatus = 0;
	
	IF cards < 5 then
		set NewStatus = 1; # waiting for cards, player does not have cards in hand to program
	elseif programmed = RequiredCards then
		set NewStatus = 4; # ready to run
	elseif programmed > locked then
		set NewStatus = 3; # programming
	else
		set NewStatus = 2; # ready to program
	END IF;
	
	Update Robots set `Status` = NewStatus where RobotID = p_Player;

	#3,4,5
	select iValue into cstatus from CurrentGameData where sKey="GameState" ;
	if ((cstatus=3) or (cstatus=4)) then 
		call procGameNextState();
	end if;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcGetNextGameState
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcGetNextGameState`;

DELIMITER $$
USE `rally`$$
CREATE FUNCTION `funcGetNextGameState` ()
RETURNS INT 
BEGIN
	DECLARE cState INT;
	DECLARE cTurn INT;
	DECLARE cPhase INT;
	DECLARE cResult INT;
    DECLARE cStartingState int;
    
    repeat
		select iValue into cState from CurrentGameData where sKey = 'GameState';
    
		set cStartingState = cState;

		CASE cState
		WHEN 0 THEN
			#New Game
			#load players
			call procGameNew();
			set cState = 2;
			update CurrentGameData set iValue=0 where iKey=2; # turn
			update CurrentGameData set iValue=0 where iKey=3; # phase
		WHEN 1 THEN
			#Waiting for C#. ## not used
			set cState = 2;
		WHEN 2 THEN
			#Next Turn
			call procResetPlayers();
			#call procUpdateShutDown();
			call procMoveCardsShuffleAndDeal();
			set cState = 3; #verify position
			update CurrentGameData set iValue=iValue+1 where iKey=2; # next turn

		WHEN 3 THEN # or 4 or 5 THEN
			#Verify Position
			select count(*) into cResult from Robots where PositionValid=0;
			if cResult = 0 then 
				set cState = 4;
			end if;
		WHEN 4 THEN
			# still programming
			Select Count(*) into cResult from Robots where (Status <> 4 and Status < 9) ; # not programmed & still active
			if cResult = 0 then
				set cState = 5;
			end if;
		WHEN 5 THEN
			#Execute Turn
            Update Robots set `Status` = 13;
			call procCurrentPosSave();
			set cState = 6;
		WHEN 6 THEN
			#Waiting for C#
			set cState = 6;
		WHEN 7 THEN
			# show message from currentgamedata
            # Just got input here...
			set cState = 8;
            
		WHEN 8 THEN
			#Running Phase
			begin
			end;
		WHEN 9 THEN
			#Continue Running Phase
			#call procKickstart();
			set cState = 8;
		WHEN 10 THEN
			#remove robot
			#call procKickstart();
			#set bKickstart = 1;
			set cState = 8;
		WHEN 11 THEN
			#game winner
			#call procKickstart();
			#set bKickstart = 1;
			set cState = 8;
		WHEN 12 THEN
			#End of game
			set cState = 2;
		WHEN 13 THEN
			# remove all connect commands from Command List
			Delete from CommandList where CommandTypeID = 70;
			#Exit game
			set cState = 0;
			set cStartingState = cState;
		WHEN 14 THEN
			#reset board (move robots)
			#set cState = 0;
			begin
			end;
		WHEN 15 THEN
			#Create programs
			#set cState = 0;
			begin
			end;
		WHEN 16 THEN
			#restore robot positions from previous turn
			# restore saved cards from previous turn
			call procCurrentPosLoad();
			set cState = 3;
			
		ELSE
			begin
			#set cState = 0;
			end;
		END CASE;
		
		update CurrentGameData set iValue=cState where sKey="GameState";
		#update CurrentGameData set iValue=cTurn where sKey="Turn";
		#update CurrentGameData set iValue=cPhase where sKey="Phase";
        
	until (cState = cStartingState)
	end repeat;

	return cState;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procProcessOption
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procProcessOption`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procProcessOption` (IN p_OptionID int, IN p_RobotID int)
BEGIN

declare rowsout int;

	CASE p_OptionID
	WHEN 58 THEN # reboot
		#Update Robots set ShutDown=1 where RobotID=p_RobotID; # this will cause damage to be cleared
		Update Robots set ShutDown=2, Damage=0 where RobotID=p_RobotID; # this will put the robot into shut-down state
	WHEN 39 THEN # recompile
		Update MoveCards set `Owner` = -2 where `Owner` = p_RobotID and Locked = 0; #order by CurrentOrder, CardID limit 1;
        #set rowsout = mysql_affected_rows();
        set rowsout = ROW_COUNT();
		Update MoveCards set `Owner` = p_RobotID where `Owner` = -1 order by CurrentOrder, CardID limit rowsout;
		Update MoveCards set `Owner` = -1, CurrentOrder = CurrentOrder+100 where `Owner` = -2; #p_RobotID; #order by CurrentOrder, CardID limit 1;
        Update Robots set Damage=Damage+1 where RobotID = p_RobotID;
	end case;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSetStatus
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procSetStatus`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procSetStatus` ()
BEGIN
# StatusLEDs

#Update StatusLEDs s
#	inner join viewRobots vr on s.LEDID = vr.RobotID
#	set R=conv(substring(vr.RobotColor,1,2),16,10),
#		G=conv(substring(vr.RobotColor,3,2),16,10),
#        B=conv(substring(vr.RobotColor,5,2),16,10),
#        Brightness=10;  # brightness will be divided by 100
        
Update StatusLEDs 
	inner join viewRobots vr on StatusLEDs.LEDID = vr.RobotID
	set StatusLEDs.Color=vr.LEDColor;
    #R=conv(substring(vr.LEDColor,1,2),16,10),
	#	G=conv(substring(vr.LEDColor,3,2),16,10),
    #    B=conv(substring(vr.LEDColor,5,2),16,10);

Update StatusLEDs
	inner join viewRobots vr on StatusLEDs.LEDID = vr.RobotID
	set Color='FF0000'
	where PositionValid=0;

Update StatusLEDs
	inner join CommandList cl on StatusLEDs.LEDID = cl.RobotID
	set Color='FF8800'
    #R=255,
	#	G=165,
    #    B=0
	where CommandTypeID=70 and StatusID=7;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procTestActiveRobots
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procTestActiveRobots`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procTestActiveRobots` ()
BEGIN
  DECLARE done BOOLEAN DEFAULT FALSE;
  DECLARE _id BIGINT UNSIGNED;
  DECLARE cur CURSOR FOR SELECT RobotID FROM Robots;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done := TRUE;

  OPEN cur;

  testLoop: LOOP
    FETCH cur INTO _id;
    IF done THEN
      LEAVE testLoop;
    END IF;
    
    call procRobotConnectionStatus(_id,70);
    
  END LOOP testLoop;

  CLOSE cur;
  # set gamestate = 7, turn = 1, phase = 0
  #procGameNextState
  #next
  #wait 2
  #next
  
  
  #`procCommandUpdateStatus` (IN p_CommandID int, in p_NewStatus int)
	DO SLEEP(2);
# for each, 3 times
	# add/update connections
    # procRobotConnectionStatus (IN p_Robot int, in p_connection int)
    # 70 = connect
    # phase 1
    # add start motor commands
    # phase 2
    # add stop motor commands
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procSetRobotDirection
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procSetRobotDirection`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procSetRobotDirection` (p_RobotID int,p_Direction int)
BEGIN
    update Robots set PositionValid=1, CurrentPosDir=p_Direction where RobotID = p_Robot;	
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procUpdatePlayerPriority
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procUpdatePlayerPriority`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procUpdatePlayerPriority` ()
BEGIN
	declare robotCount int;
    
	# bump priority of each player
	Update Robots set Priority = Priority - 1;
	select count(RobotID) from Robots into robotCount;
	# change priority of last/first player
	Update Robots set Priority = robotCount where Priority = 0;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcProcessCommand
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcProcessCommand`;

DELIMITER $$
USE `rally`$$
CREATE FUNCTION `funcProcessCommand` (p_CommandID int, p_NewStatus int)
RETURNS int
BEGIN
	DECLARE result INT;
	DECLARE cTurn INT;
	DECLARE cPhase INT;
	DECLARE cSequence INT;
	DECLARE cRecords INT;
    DECLARE cState INT;
    
    declare cRow int;
    declare cCol int;
    declare cDir int;
    declare cParameter int;
    declare cParameterB int;
    declare cRobotID int;
    declare cType int;
    declare cDone int;
    declare cRobotsActive int;
    declare cDescription varchar(50);
    
    declare cPhaseCount int;
    
#update status
#pass in command and new status
#loop-
#-process command, if needed
#-update status on command
#-if command exists and is not complete, exit
#
#-find next command
#-if no command is available, sent next commands as active
#-find next command
#-if no command is available, exit

# CommandStatus
#1-Waiting
#2-Ready (should execute now)
#3-Script Command (waiting for Python)
#4-In Progress (python is running)
#5-Script Complete (now update position)
#6-Command Complete

# - Game States
#7 - Run Phase (wait for input)
#8 - Running Phase (in process)
    
#==========

	select CommandTypeID, RobotID, Parameter, ParameterB, PositionRow, PositionCol, PositionDir, Turn, `Phase`, Description
		into cType, cRobotID, cParameter, cParameterB, cRow, cCol, cDir, cTurn, cPhase, cDescription 
        from CommandList 
        where CommandID = p_CommandID;
            
	# if there is a command...
    if (p_NewStatus = -1) then
		set p_NewStatus = 6; # Command complete
	end if;

	case cType
	  WHEN 3 THEN #Player Location
		set p_NewStatus = 5; # update position
	  WHEN 15 THEN #Player Archive
		Update Robots set ArchivePosRow = cRow, 
			ArchivePosCol = cCol,
			ArchivePosDir = 0
			where RobotID = cRobotID;
	  WHEN 14 THEN #Player Damage
		Update Robots set Damage = cParameter where RobotID = cRobotID;
	  WHEN 73 then
        # add spam to cards
        select `funcDealSpamToPlayer`(cRobotID ) into result;
	  WHEN 16 THEN #Player Flag
		Update Robots set CurrentFlag = cParameter where RobotID = cRobotID;
	  WHEN 22 THEN #Player Lost Lives
		Update Robots set Lives = cParameter where RobotID = cRobotID;
	  When 24 then # Deal card to player
		update MoveCards set Owner = cRobotID where CardID = cParameter;
	  #When 20 then # dead
		#Update Robots set Status = 11 where RobotID = cRobotID; # he-s dead, jim
		#update CurrentGameData set GameState = 10, CommandParameter = cRobotID; # remove player
		#update CurrentGameData set iValue =  10 where iKey = 10;
        #update CurrentGameData set iValue =  cRobotID where iKey = 13;
	  When 41 then # game winner
		#update CurrentGameData set GameState = 11, CommandParameter = cRobotID; # Game Winner
		update CurrentGameData set iValue =  11 where iKey = 10;
        update CurrentGameData set iValue =  cRobotID where iKey = 13;
	  When 95 then # End of game
		#update CurrentGameData set GameState = 12; # End of game
		update CurrentGameData set iValue = 12 where iKey = 10;
	  When 42 then # mark card as executed
		update MoveCards set Executed=1 where CardID = cParameter and `Owner`= cRobotID; # Execute Card
		#Update CurrentGameData set Message = "Played Card";
		update CurrentGameData set sValue = "Played Card" where iKey = 21; # Message?
	  When 97 then # Set Game State
		#update CurrentGameData set GameState = cParameter, CommandParameter = cRobotID; # New Game State
		update CurrentGameData set iValue = cParameter where iKey = 10;
        update CurrentGameData set iValue =  cRobotID where iKey = 13;
	  When 96 then # Delete Robot
		Delete from Robots where RobotID = cRobotID;
	  When 63 then # Set State
		Update Robots set Status = cParameter where RobotID = cRobotID;
	  When 64 then # set Damage Points
		Update Robots set DamagePoints = cParameter where RobotID = cRobotID;
	  When 65 then # deal option
		Begin
		End;
	  When 66 then # Delete Option from player
		Delete from RobotOptions where RobotID = cRobotID and OptionID = cParameter;
	  When 67 then # Use Option
		Update RobotOptions set Quantity = cParameterB where RobotID = cRobotID and OptionID = cParameter;
	  When 68 then # Set Max Damage
		#Update CurrentGameData set MaxDamage = cParameter ;
		update CurrentGameData set iValue =  cParameter where iKey = 17;

	  When 82 then # Set Shut Down
		Update Robots set `ShutDown` = cParameter where RobotID = cRobotID ;
	  When 30 then # start phase
		Begin
		End;
	  When 21 then # push move
		Begin
		End;
	  When 49 then # begin board effects
		Begin
		End;
	  When 60 then # Fire
		Begin
		End;
	  When 56 then # canceled move
		Begin
		End;
	  When 55 then # water
		Begin
		End;
	  When 18 then # blocked by wall
		Begin
		End;
	  When 43 then # when 43 then # play option card
		Begin
		End;
	  When 91 then # when 91 set current game data
		update CurrentGameData set iValue = cParameterB where iKey = cParameter;
	  When 92 then # when 92 Button Mode
		update CurrentGameData set iValue = 7, sValue = cDescription where iKey = 10;  # go to wait for input state and set button text
	  When 17 then # deal option card
		if cParameter=0 then
			# must be updated to select next available option
			#select Parameter into cParameter from CommandList where CommandID = p_CommandID;
			set cParameter = funcGetNextOption(cRobotID);
		end if;
		#Insert into 
		insert into RobotOptions (RobotID, OptionID, DestroyWhenDamaged, Quantity, IsActive,PhasePlayed,DataValue)
		Select  cRobotID, OptionID, false, Quantity, false, 0, 0 from `Options` where OptionID=cParameter;
		
	  #when 80 then # play mine
	  #when 81 then # lay bridge
	  #when ?? then # discard option card (played)
		
	  #when 70 then # connect
	  #when 71 then # disconnect
	  
	  ELSE
		begin
        end;
	END CASE;
			
        
	if p_NewStatus=5 then 
		if cCol>=0 and cRow>=0 then # ready to execute; or move complete
			Update Robots set CurrentPosRow = cRow, 
				CurrentPosCol = cCol,
				CurrentPosDir = cDir,
				Score = cParameterB
				where RobotID = cRobotID;
		end if;
				
		set p_NewStatus=6; # command complete
	end if;
	
	if (p_CommandID > 0) then 
		update CommandList set StatusID = p_NewStatus where CommandID = p_CommandID; #mark this command as the new status
	end if;
		#	update CommandList set StatusID = p_NewStatus where CommandID = p_CommandID; #mark this command as the new status
        
	return p_NewStatus;
end;$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcGetNextCard
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcGetNextCard`;

DELIMITER $$
USE `rally`$$
CREATE FUNCTION `funcGetNextCard` (p_player int, p_usedSpam int) 
RETURNS INT 
BEGIN

# the code for "procMoveCardsShuffleAndDeal" contains code like this
    DECLARE cCardID INT;
    DECLARE cCardLoc INT;

	#if (p_usedSpam > 0) then 
	update MoveCards set CardLocation = 5 where `Owner` = p_player and CardID = p_usedSpam;
	#end if;

	select CardID, CardLocation into cCardID, cCardLoc
	from MoveCards 
    where `Owner` = p_player and (CardLocation = 0 or CardLocation = 3)
    order by CurrentOrder limit 1;

	# card is not in deck
	if (cCardLoc <> 0) then
   
		#move discards
		Update MoveCards m0 
		set CardLocation = 0
		where CardLocation = 3;
        
		# shuffle cards 
		Update MoveCards mc inner join MoveCardLocations mcl on mc.CardLocation = mcl.LocationID
		Set mc.Random = ROUND(500.0 * RAND() )+mcl.DealPriority*500,CurrentOrder = 0  ;
		
		#put cards in order
		Update MoveCards m1 inner join
		(
			Select mc.CardID, mc.Owner, count(mc.CardID) as cnt, mc.CardLocation  from MoveCards mc 
			inner join MoveCards mc2 on mc.Owner = mc2.Owner and mc.Random >=mc2.Random
			group by mc.CardID, mc.Owner , mc.CardLocation
		order by mc.Owner, cnt
		) ij
		on m1.Owner = ij.Owner and m1.CardID=ij.CardID
		set m1.CurrentOrder = ij.cnt;
        
        #get one card
		select CardID, CardLocation into cCardID, cCardLoc
		from MoveCards 
		where `Owner` = p_player and CardLocation = 0
		order by CurrentOrder limit 1;

    end if ;
    
	#Mark as used
	Update MoveCards set CardLocation = 1 where `Owner` = p_player and CardID = cCardID;
    
	#return one card
    return cCardID;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procGameStart
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procGameStart`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procGameStart` (in p_GameDataID int)
BEGIN
# pass in the GameDataID to start a new game

	Update CurrentGameData set iValue = 0 where iKey = 10; # set game state to 0
	Update CurrentGameData set iValue = p_GameDataID where iKey = 26; # set gamedata id 
    
    select funcGetNextGameState();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcMarkCommandsReady
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcMarkCommandsReady`;

DELIMITER $$
USE `rally`$$
CREATE function `funcMarkCommandsReady` ()
RETURNS INT 
BEGIN
	DECLARE result INT;
	DECLARE cTurn INT;
	DECLARE cPhase INT;
	DECLARE cSequence INT;
	DECLARE cRecords INT;

    # check to see if any others are still incomplete.  If so, exit
    select count(CommandID) into result from CommandList where StatusID>=2 and StatusID <=4;
    if result > 0 then 
		return result; # commands in progress
    end if;
    
    # otherwise, look at the current turn & phase & set the first command block which is "waiting" to "ready"
    select iValue into cTurn from CurrentGameData where sKey = 'Turn';
    select iValue into cPhase from CurrentGameData where sKey = 'Phase';
    
#    select Turn, Phase into cTurn, cPhase from CurrentGameData;
    select count(CommandID), min(CommandSequence) into cRecords, cSequence from CommandList 
		where Turn=cTurn and Phase=cPhase and StatusID=1;
    
    if (cRecords = 0) then # no more commands this Phase
		return 0; # no commands waiting
		#Update CurrentGameData set GameState=9; # done running phase
	end if;
    
    #set this sequence to ready
    Update CommandList set StatusID=2 where Turn=cTurn and Phase=cPhase and CommandSequence=cSequence; 
    select count(CommandID) into result from CommandList where StatusID>=2 and StatusID <=4;
    
    return result; # commands waiting/in progress
    
    # when done, check again...?
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function funcDealSpamToPlayer
-- -----------------------------------------------------

USE `rally`;
DROP function IF EXISTS `rally`.`funcDealSpamToPlayer`;

DELIMITER $$
USE `rally`$$
CREATE function `funcDealSpamToPlayer` (p_RobotID int)
returns int # new card id
BEGIN
	# finc max card id
    # add new card 
    # in the future, the will be a spam deck with haywire cards
    declare maxid int;
    
    select max(cardID)+1 into maxid from MoveCards where `Owner`=p_RobotID;
    insert into MoveCards (CardID, CardTypeID, `Owner`, CardLocation) values (maxid, 10, p_RobotID, 3) ; # spam card, discarded
    
    return maxid;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procGetReadyCommands
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procGetReadyCommands`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procGetReadyCommands` ()
this_proc:BEGIN
	DECLARE result INT;
	DECLARE cTurn INT;
	DECLARE cPhase INT;
	DECLARE cSequence INT;
	DECLARE cRecords INT;
    
    select iValue into result from CurrentGameData where iKey = 10; # gamestate
    if result != 8 then
		select * from viewCommandListActive;
		LEAVE this_proc;
    end if;

    # check to see if any others are still incomplete.  If so, exit
    select count(*) into result from viewCommandListActive ;
    if result > 0 then 
		select * from viewCommandListActive ;
		LEAVE this_proc;
    end if;
    
    # otherwise, look at the current turn & phase & set the first command block which is "waiting" to "ready"
    select iValue into cTurn from CurrentGameData where sKey = 'Turn';
    #select iValue into cPhase from CurrentGameData where sKey = 'Phase';
    
#    select Turn, Phase into cTurn, cPhase from CurrentGameData;
    select count(CommandID), min(CommandSequence) into cRecords, cSequence from CommandList 
		where Turn=cTurn and StatusID=1;
    
    if (cRecords = 0) then # no more commands this Phase
		select * from viewCommandListActive;
		LEAVE this_proc;
	end if;
    
    #set this sequence to ready
    Update CommandList set StatusID=2 where Turn=cTurn and CommandSequence=cSequence; 
    #select count(CommandID) into result from CommandList where StatusID>=2 and StatusID <=4;
    
    select * from viewCommandListActive;
    
    #return result; # commands waiting/in progress
    
    # when done, check again...?
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procUpdateRobotCards
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procUpdateRobotCards`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procUpdateRobotCards` ( in p_Player int)
BEGIN
    DECLARE sCardsDealt varchar(30);
    DECLARE sCardsPlayed varchar(20);

	select GROUP_CONCAT(mc.CardTypeID order by mc.CardTypeID desc)  into sCardsDealt
	from MoveCards mc 
	where mc.CardLocation =1 and owner =p_Player
    #group by owner,mc.CardLocation
    ;
	   
    select GROUP_CONCAT(IFNULL( mcs.CardTypeID,0) order by pc.ID  )  into sCardsPlayed 
    from PhaseCounter pc 
     left join (select * from MoveCards mc where `Owner` = p_Player) mcs on pc.ID = mcs.PhasePlayed
     #group by owner
     ;
     
	Update Robots set CardsDealt = sCardsDealt, CardsPlayed = sCardsPlayed where RobotID = p_Player;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure procCardPlayed
-- -----------------------------------------------------

USE `rally`;
DROP procedure IF EXISTS `rally`.`procCardPlayed`;

DELIMITER $$
USE `rally`$$
CREATE PROCEDURE `procCardPlayed` (in p_Card varchar(1), in p_Player int)
BEGIN
    DECLARE inProgramming INT;
    DECLARE NewStatus INT;
    DECLARE PhaseCount INT;
    DECLARE ProgramCount INT;
    DECLARE TargetPhase int;
    DECLARE uCardID int;
    DECLARE uPhasePlayed int;
    
	select Programming from Robots inner join RobotStatus on Robots.Status = RobotStatus.RobotStatusID 
		where Robots.RobotID=p_Player into inProgramming;
		
	if inProgramming = 1 then 
		select iValue into PhaseCount from CurrentGameData where sKey="PhaseCount" ;
        
        # find first card of that type for player (1=hand, 2=played)
        Select min(CardID) into uCardID from MoveCards inner join MoveCardTypes on MoveCards.CardTypeID = MoveCardTypes.CardTypeID 
			where `Owner` = p_Player and CardLocation = 1 and MoveCardTypes.ShortDescription = p_Card;
        if uCardID is not null then
			# find first empty phase
            Select min(pc.ID) into uPhasePlayed from PhaseCounter pc left join MoveCards mc on pc.ID = mc.PhasePlayed and mc.Owner = p_Player where mc.CardTypeID is null; 
            # no place to play this card
            if uPhasePlayed is not null and uPhasePlayed <= PhaseCount then 
				Update MoveCards set PhasePlayed = uPhasePlayed, CardLocation=2 where `Owner` = p_Player and  CardID = uCardID and CardLocation=1 ;
            end if;
        end if ;
        
		#call procMoveCardsCheckOne(p_Player);
        set NewStatus = 3;
        
		select count(*) as p into ProgramCount from MoveCards where `Owner` = p_Player and CardLocation = 2 ;
        if PhaseCount = ProgramCount then
			set NewStatus = 4;
        end if;
        
        call procUpdateRobotCards(p_Player);
                
		Update Robots set `Status` = NewStatus where RobotID = p_Player;
        
	end if ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `rally`.`viewMoveCards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewMoveCards`;
DROP VIEW IF EXISTS `rally`.`viewMoveCards` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewMoveCards` AS
    SELECT 
        CardID,
        MoveCardTypes.Description as `Desc`,
        MoveCardTypes.ShortDescription as ShortDesc,
        `Owner`,
        PhasePlayed,
        Executed,
        Locked,
        FileName,
        MoveCardLocations.Description as Location
    FROM
        MoveCards 
        inner join MoveCardTypes on MoveCards.CardTypeID = MoveCardTypes.CardTypeID
        inner join MoveCardLocations on MoveCards.CardLocation = MoveCardLocations.LocationID;

-- -----------------------------------------------------
-- View `rally`.`viewRobots`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewRobots`;
DROP VIEW IF EXISTS `rally`.`viewRobots` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewRobots` AS
select RobotID, 
RobotBodies.`Name` as RobotName, 
RobotBodies.Color as RobotColor, 
RobotBodies.ColorFG as RobotColorFG,
CurrentFlag, 
RobotStatus.StatusColor as StatusColor,
RobotStatus.LEDColor as LEDColor,
RobotStatus.ShortDescription as PlayerStatus,
Robots.Status as StatusID,
CurrentPosCol as `X`,
CurrentPosRow as `Y`,
CurrentPosDir as Dir,
ShortDirDesc as sDir,
ArchivePosCol as `AX`,
ArchivePosRow as `AY`,
Robots.Score as Score,
OperatorName,
PositionValid,
Priority,
`ShutDown`,
`Password`,
PlayerSeat,
Energy,
Concat(CurrentFlag,"/",Energy) FlagEnergy,
so.Direction as PlayerViewDirection,
so.Direction as DirectionAdjustment,
Robots.CardsDealt,
Robots.CardsPlayed,
if(isnull(ShowCardsPlayed) || RobotStatus.Active=0,RobotStatus.ShortDescription,ShowCardsPlayed) as StatusToShow,
rm.Message


from (Robots inner join RobotBodies on Robots.RobotBodyID = RobotBodies.RobotBodyID)
 inner join RobotStatus on if(Robots.IsConnected=1,Robots.`Status`,10) = RobotStatus.RobotStatusID
 inner join RobotDirections on Robots.CurrentPosDir = RobotDirections.DirID
 inner join SeatOrientation so on PlayerSeat = so.SeatID

 left join (
 #show cards played
select Owner, 
GROUP_CONCAT(if(isnull(mc.CardID),"-",if(mc.Executed,mct.ShortDescription,"X")) order by PhasePlayed ) ShowCardsPlayed
from MoveCards mc inner join MoveCardTypes mct on mc.CardTypeID = mct.CardTypeID 
where mc.PhasePlayed>0 group by owner order by Owner) played
on Robots.RobotID = played.Owner
inner join RobotMessages rm on Robots.MessageID = rm.MessageID

Order By Priority;

-- -----------------------------------------------------
-- View `rally`.`viewCommandList`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewCommandList`;
DROP VIEW IF EXISTS `rally`.`viewCommandList` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewCommandList` AS
Select CommandID, Turn, `Phase`,cl.CommandCatID, CommandTypeID,Parameter,ParameterB,RobotID,CommandSequence,CommandSubSequence,
cl.StatusID, BTCommand, cl.Description, PositionRow, PositionCol,PositionDir, cc.Description CatDes, cs.StatusDescription, cs.StatusColor
from CommandList cl 
inner join CommandCategories cc on cl.CommandCatID = cc.CommandCatID
inner join CommandStatusLookup cs on cl.StatusID = cs.StatusID;

-- -----------------------------------------------------
-- View `rally`.`viewOptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewOptions`;
DROP VIEW IF EXISTS `rally`.`viewOptions` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewOptions` AS
Select OptionID, `Name`, SRR_Text, EditorType, Quantity, Damage  from Options where Functional > 7;

-- -----------------------------------------------------
-- View `rally`.`viewRobotOptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewRobotOptions`;
DROP VIEW IF EXISTS `rally`.`viewRobotOptions` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewRobotOptions` AS
Select RobotID, RobotOptions.OptionID, Name, SRR_Text, EditorType, 
  DestroyWhenDamaged, RobotOptions.Quantity, IsActive, PhasePlayed, DataValue,Damage
from viewOptions inner join RobotOptions on viewOptions.OptionID = RobotOptions.OptionID
order by Name;

-- -----------------------------------------------------
-- View `rally`.`viewCurrentGame`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewCurrentGame`;
DROP VIEW IF EXISTS `rally`.`viewCurrentGame` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewCurrentGame` AS
Select sKey, iValue, sValue, Category from CurrentGameData;

-- -----------------------------------------------------
-- View `rally`.`viewBoard`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewBoard`;
DROP VIEW IF EXISTS `rally`.`viewBoard` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewBoard` AS

Select Boards.BoardID, Boards.BoardName, Max(BoardItems.X) as MaxX, Max(BoardItems.Y) as MaxY 
from Boards inner join BoardItems on Boards.BoardID = BoardItems.BoardID group by Boards.BoardID, Boards.BoardName;

-- -----------------------------------------------------
-- View `rally`.`viewCommandListActive`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewCommandListActive`;
DROP VIEW IF EXISTS `rally`.`viewCommandListActive` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewCommandListActive` AS
select * from CommandList where StatusID>=2 and StatusID <=4;

-- -----------------------------------------------------
-- View `rally`.`viewRobotsOld`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewRobotsOld`;
DROP VIEW IF EXISTS `rally`.`viewRobotsOld` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewRobotsOld` AS
select RobotID, 
RobotBodies.`Name` as RobotName, 
RobotBodies.Color as RobotColor, 
RobotBodies.ColorFG as RobotColorFG,
CurrentFlag, 
RobotStatus.StatusColor as StatusColor,
RobotStatus.LEDColor as LEDColor,
RobotStatus.ShortDescription as PlayerStatus,
Robots.Status as StatusID,
CurrentPosCol as `X`,
CurrentPosRow as `Y`,
CurrentPosDir as Dir,
ShortDirDesc as sDir,
ArchivePosCol as `AX`,
ArchivePosRow as `AY`,
Robots.Score as Score,
OperatorName,
PositionValid,
Priority,
`ShutDown`,
`Password`,
PlayerSeat,
Energy,
Concat(CurrentFlag,"/",Energy) FlagEnergy,
so.Direction as PlayerViewDirection,
so.Direction as DirectionAdjustment,
dealt.CardsDealt,
played.CardsPlayed,
if(isnull(ShowCardsPlayed) || RobotStatus.Active=0,RobotStatus.ShortDescription,ShowCardsPlayed) as StatusToShow


from (Robots inner join RobotBodies on Robots.RobotBodyID = RobotBodies.RobotBodyID)
 inner join RobotStatus on if(Robots.IsConnected=1,Robots.`Status`,10) = RobotStatus.RobotStatusID
 inner join RobotDirections on Robots.CurrentPosDir = RobotDirections.DirID
 inner join SeatOrientation so on PlayerSeat = so.SeatID

 left join (
 select Owner, GROUP_CONCAT(mct.ShortDescription order by mct.CardTypeID) CardsDealt from MoveCards mc inner join MoveCardTypes mct on mc.CardTypeID = mct.CardTypeID where mc.CardLocation =1 group by owner ) dealt
 on Robots.RobotID = dealt.Owner

 left join (
 #show cards played
select Owner, 
GROUP_CONCAT(if(isnull(mc.CardID),"-",if(mc.Executed,mct.ShortDescription,"X")) order by PhasePlayed ) ShowCardsPlayed ,
GROUP_CONCAT(mct.ShortDescription order by PhasePlayed ) CardsPlayed 
from MoveCards mc inner join MoveCardTypes mct on mc.CardTypeID = mct.CardTypeID 
where mc.PhasePlayed>0 group by owner order by Owner) played
on Robots.RobotID = played.Owner

Order By Priority;

-- -----------------------------------------------------
-- View `rally`.`viewRobotsMicro`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `rally`.`viewRobotsMicro`;
DROP VIEW IF EXISTS `rally`.`viewRobotsMicro` ;
USE `rally`;
CREATE  OR REPLACE VIEW `viewRobotsMicro` AS
select RobotID, 
RobotBodies.`Name` as RobotName, 
RobotBodies.Color as RobotColor, 
RobotBodies.ColorFG as RobotColorFG,
CurrentFlag, 
RobotStatus.StatusColor as StatusColor,
RobotStatus.LEDColor as LEDColor,
RobotStatus.ShortDescription as PlayerStatus,
Robots.Status as StatusID,
CurrentPosCol as `X`,
CurrentPosRow as `Y`,
CurrentPosDir as Dir,
ShortDirDesc as sDir,
ArchivePosCol as `AX`,
ArchivePosRow as `AY`,
Robots.Score as Score,
OperatorName,
PositionValid,
Priority,
`ShutDown`,
`Password`,
PlayerSeat,
Energy,
Concat(CurrentFlag,"/",Energy) FlagEnergy,
so.Direction as PlayerViewDirection,
so.Direction as DirectionAdjustment,
Robots.CardsDealt,
Robots.CardsPlayed,
if(isnull(ShowCardsPlayed) || RobotStatus.Active=0,RobotStatus.ShortDescription,ShowCardsPlayed) as StatusToShow,
rm.Message


from (Robots inner join RobotBodies on Robots.RobotBodyID = RobotBodies.RobotBodyID)
 inner join RobotStatus on if(Robots.IsConnected=1,Robots.`Status`,10) = RobotStatus.RobotStatusID
 inner join RobotDirections on Robots.CurrentPosDir = RobotDirections.DirID
 inner join SeatOrientation so on PlayerSeat = so.SeatID

 left join (
 #show cards played
select Owner, 
GROUP_CONCAT(if(isnull(mc.CardID),"-",if(mc.Executed,mct.ShortDescription,"X")) order by PhasePlayed ) ShowCardsPlayed
from MoveCards mc inner join MoveCardTypes mct on mc.CardTypeID = mct.CardTypeID 
where mc.PhasePlayed>0 group by owner order by Owner) played
on Robots.RobotID = played.Owner
inner join RobotMessages rm on Robots.MessageID = rm.MessageID

Order By Priority;
USE `rally`;

DELIMITER $$

USE `rally`$$
DROP TRIGGER IF EXISTS `rally`.`Robots_BEFORE_UPDATE` $$
USE `rally`$$
CREATE DEFINER = CURRENT_USER TRIGGER `rally`.`Robots_BEFORE_UPDATE` BEFORE UPDATE ON `Robots` FOR EACH ROW
BEGIN
	# if player is set to shut-down, change the state
    
    if NEW.Damage > 9 then
		Set NEW.`Status` = 11; # mostly dead
        set new.ShutDown = 0;
    end if;
    
    if New.ShutDown = 4 then 
		Set New.Damage = 0;
        set New.ShutDown = 2;
    end if ;
    
    IF NEW.`ShutDown` = 2 THEN
		Set NEW.`Status` = 9; # shut down
    END IF;
    
    IF NEW.PositionValid <> OLD.PositionValid THEN
		set NEW.MessageID = 1 - NEW.PositionValid;
    END IF;
    

END$$


USE `rally`$$
DROP TRIGGER IF EXISTS `rally`.`Robots_AFTER_UPDATE` $$
USE `rally`$$
CREATE DEFINER = CURRENT_USER TRIGGER `rally`.`Robots_AFTER_UPDATE` AFTER UPDATE ON `Robots` FOR EACH ROW
BEGIN
	call procSetStatus();
END$$


USE `rally`$$
DROP TRIGGER IF EXISTS `rally`.`CurrentGameData_BEFORE_UPDATE` $$
USE `rally`$$
CREATE DEFINER = CURRENT_USER TRIGGER `rally`.`CurrentGameData_BEFORE_UPDATE` BEFORE UPDATE ON `CurrentGameData` FOR EACH ROW
BEGIN
declare sMessage varchar(45);

	if New.sKey = "GameState" or new.iKey = 10 then 
		if new.sValue <> old.sValue then
			begin
			end;
		else
			select ButtonText into sMessage from GameState where GameStateID=new.iValue;
			set new.sValue = sMessage;
        end if;
	elseif new.sKey = "GameType" or new.iKey = 1 then
		select Description into sMessage from GameTypes where GameType=new.iValue;
        set new.sValue = sMessage;
	elseif new.sKey = "BoardID" or new.iKey = 20 then
		select BoardName into sMessage from Boards where BoardID=new.iValue;
        set new.sValue = sMessage;
	end if ;

END$$


USE `rally`$$
DROP TRIGGER IF EXISTS `rally`.`CommandList_BEFORE_INSERT` $$
USE `rally`$$
CREATE DEFINER = CURRENT_USER TRIGGER `rally`.`CommandList_BEFORE_INSERT` BEFORE INSERT ON `CommandList` FOR EACH ROW
BEGIN
	DECLARE cResult INT;

	Select max(CommandID) + 1 into cResult from CommandList;
    if (cResult is null) then 
		begin
		#Set New.CommandID = 1;
        end;
	else
		Set New.CommandID = cResult;
    end if;
END$$


USE `rally`$$
DROP TRIGGER IF EXISTS `rally`.`GameData_BEFORE_UPDATE` $$
USE `rally`$$
CREATE DEFINER = CURRENT_USER TRIGGER `rally`.`GameData_BEFORE_UPDATE` BEFORE UPDATE ON `GameData` FOR EACH ROW
BEGIN
declare sBoardName varchar(45);
declare iGameType int;
declare iLaser int;
declare iPhaseCount int;
declare iPlayers int;
declare iTotalFlags int;
declare iBoardCols int;
declare iBoardRows int;

	if new.BoardID <> old.BoardID or (old.BoardID is null and new.BoardID is not null) then
        Select GameType,BoardName,LaserDamage,PhaseCount,Players,TotalFlags,X,Y 
			into iGameType,sBoardName,iLaser,iPhaseCount,iPlayers,iTotalFlags,iBoardCols,iBoardRows 
            from Boards where BoardID = new.BoardID;
        set new.LaserDamage = iLaser;
        set new.BoardName = sBoardName;
        set new.GameType = iGameType;
        set new.PhaseCount = iPhaseCount;
        set new.TotalFlags = iTotalFlags;
        set new.BoardCols = iBoardCols;
        set new.BoardRows = iBoardRows;
			
    end if;
END$$


USE `rally`$$
DROP TRIGGER IF EXISTS `rally`.`StatusLEDs_BEFORE_UPDATE` $$
USE `rally`$$
CREATE DEFINER = CURRENT_USER TRIGGER `rally`.`StatusLEDs_BEFORE_UPDATE` BEFORE UPDATE ON `StatusLEDs` FOR EACH ROW
BEGIN
	if new.Color<>'' then
		set New.R=conv(substring(New.Color,1,2),16,10);
        set New.G=conv(substring(New.Color,3,2),16,10);
        set New.B=conv(substring(New.Color,5,2),16,10);
	end if ;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `rally`.`RobotBases`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (1, NULL, NULL, '00:16:53:08:BE:AA', 1);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (2, NULL, NULL, '00:16:53:0A:76:DD', 2);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (3, NULL, NULL, '00:16:53:0A:76:11', 3);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (4, NULL, NULL, '00:16:53:08:B6:A7', 4);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (5, NULL, NULL, '00:16:53:0A:7D:86', 5);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (6, NULL, NULL, '00:16:53:0A:82:8D', 6);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (7, NULL, NULL, '00:16:53:08:BE:77', 7);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (8, NULL, NULL, '00:16:53:0A:37:26', 8);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (9, NULL, NULL, '00:16:53:0A:36:D5', 9);
INSERT INTO `rally`.`RobotBases` (`RobotBaseID`, `Port`, `BatteryStatus`, `MACID`, `DefaultBody`) VALUES (10, NULL, NULL, '00:16:53:0A:36:67', 10);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`RobotBodies`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (1, 'Hammerbot', '7338B0', 1, 'FFFFFF');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (2, 'Hulk X90', 'FE0000', 1, 'FFFFFF');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (3, 'Smashbot', 'FFE733', 1, '000000');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (4, 'Spinbot', '0000FF', 1, 'FFFFFF');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (5, 'Trundlebot', 'B76DBB', 1, 'FFFFFF');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (6, 'Twitch', 'BE9371', 1, 'FFFFFF');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (7, 'Twonky', 'EB9C1B', 1, '000000');
INSERT INTO `rally`.`RobotBodies` (`RobotBodyID`, `Name`, `Color`, `BodyActive`, `ColorFG`) VALUES (8, 'Zoombot', '2A611E', 1, 'FFFFFF');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`RobotStatus`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (0, 'Unknown', 'Unknown', 0, 0, 'FFFFFF', 'FFFFFF');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (1, 'Waiting For Cards', 'Wait', 1, 1, 'FFFFFF', 'FFFFFF');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (2, 'Ready to Program', 'Program', 1, 1, 'CCFFCC', '003333');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (3, 'Programming', 'Program', 1, 1, 'AAFFAA', '008888');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (4, 'Ready to Run', 'Ready', 1, 1, '00FF00', '00FF00');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (5, 'Move In Progress', 'Moving', 1, 0, '0000FF', '0000FF');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (6, 'Moving', 'Moving', 1, 0, '0000FF', '0000FF');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (7, 'Connection Failing', 'Connect', 1, 0, 'FFA500', 'FFA500');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (8, 'Connected', 'Connect', 1, 0, 'AAAAFF', '000088');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (9, 'Shut Down', 'Shut Down', 0, 0, 'FFFF00', 'FFFF00');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (10, 'Not Active', 'Inactive', 0, 0, 'FF0000', 'FF0000');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (11, 'Dead', 'Dead', 0, 0, 'FF0000', 'FF0000');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (12, 'Move Complete', 'Done', 1, 0, 'FF00FF', '880088');
INSERT INTO `rally`.`RobotStatus` (`RobotStatusID`, `Description`, `ShortDescription`, `Active`, `Programming`, `StatusColor`, `LEDColor`) VALUES (13, 'Program Locked', 'Locked In', 1, 0, '55FF55', '55FF55');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`RobotShutDown`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotShutDown` (`ShutDownID`, `Description`, `NextState`, `RobotActiveState`) VALUES (0, 'None', 0, 1);
INSERT INTO `rally`.`RobotShutDown` (`ShutDownID`, `Description`, `NextState`, `RobotActiveState`) VALUES (1, 'Next Turn', 4, 1);
INSERT INTO `rally`.`RobotShutDown` (`ShutDownID`, `Description`, `NextState`, `RobotActiveState`) VALUES (2, 'Currently', 0, 9);
INSERT INTO `rally`.`RobotShutDown` (`ShutDownID`, `Description`, `NextState`, `RobotActiveState`) VALUES (3, 'Reset', 2, 1);
INSERT INTO `rally`.`RobotShutDown` (`ShutDownID`, `Description`, `NextState`, `RobotActiveState`) VALUES (4, 'Clear & Currently', 2, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`MoveCardTypes`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (0, 'Unknown', '-', 0, 'Blank');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (1, 'U-Turn', 'U', 2, 'UTurn');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (2, 'Right Turn', 'R', 1, 'RTurn');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (3, 'Left Turn', 'L', -1, 'LTurn');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (4, 'Backward 1', 'B', -1, 'Back1');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (5, 'Forward 1', '1', 1, 'Forward1');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (6, 'Forward 2', '2', 2, 'Forward2');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (7, 'Forward 3', '3', 3, 'Forward3');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (8, 'Again', 'A', 0, 'Again');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (9, 'Power Up', 'P', 0, 'PowerUp');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (10, 'Spam', 'S', 0, 'Spam');
INSERT INTO `rally`.`MoveCardTypes` (`CardTypeID`, `Description`, `ShortDescription`, `Value`, `FileName`) VALUES (11, 'Haywire', 'H', 0, 'Haywire');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`MoveCardsCompleteList`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 1, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 2, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 3, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 4, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 5, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 6, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 7, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 8, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 9, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 10, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 11, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 12, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 13, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 14, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 15, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 16, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 17, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 18, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 19, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 20, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 21, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 22, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 23, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 24, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 25, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 26, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 27, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 28, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 29, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 30, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 31, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 32, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 33, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 34, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 35, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 36, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 37, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 38, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 39, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 40, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 41, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 42, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 43, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 44, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 45, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 46, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 47, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 48, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 49, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 50, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 51, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 52, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 53, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 54, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 55, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 56, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 57, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 58, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 59, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 60, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 61, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 62, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 63, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 64, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 65, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 66, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 67, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 68, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 69, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 70, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 71, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 72, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 73, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 74, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 75, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 76, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 77, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 78, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 79, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 80, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 81, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 82, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 83, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (1, 84, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 1, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 2, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 3, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 4, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 5, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 6, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 7, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 8, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 9, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 10, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 11, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 12, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 13, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 14, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 15, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 16, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 17, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 18, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 19, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 20, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 21, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 22, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 23, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 24, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 25, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 26, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 27, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 28, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 29, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 30, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 31, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 32, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 33, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 34, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 35, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 36, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 37, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 38, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 39, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 40, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 41, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 42, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 43, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 44, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 45, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 46, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 47, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 48, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 49, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 50, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 51, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 52, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 53, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 54, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 55, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 56, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 57, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 58, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 59, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 60, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 61, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 62, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 63, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 64, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 65, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 66, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 67, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 68, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 69, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 70, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 71, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 72, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 73, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 74, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 75, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 76, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 77, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 78, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 79, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 80, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 81, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 82, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 83, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 84, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 85, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 86, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 87, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 88, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 89, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 90, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 91, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 92, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 93, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 94, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 95, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 96, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 97, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 98, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 99, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 100, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 101, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 102, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 103, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 104, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 105, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 106, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 107, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 108, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 109, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 110, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 111, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (2, 112, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 1, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 2, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 3, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 4, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 5, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 6, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 7, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 8, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 9, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 10, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 11, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 12, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 13, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 14, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 15, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 16, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 17, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 18, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 19, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 20, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 21, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 22, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 23, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 24, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 25, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 26, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 27, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 28, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 29, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 30, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 31, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 32, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 33, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 34, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 35, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 36, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 37, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 38, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 39, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 40, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 41, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 42, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 43, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 44, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 45, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 46, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 47, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 48, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 49, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 50, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 51, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 52, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 53, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 54, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 55, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 56, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 57, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 58, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 59, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 60, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 61, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 62, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 63, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 64, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 65, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 66, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 67, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 68, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 69, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 70, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 71, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 72, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 73, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 74, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 75, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 76, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (3, 77, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 1, 1);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 2, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 3, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 4, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 5, 2);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 6, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 7, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 8, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 9, 3);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 10, 4);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 11, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 12, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 13, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 14, 5);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 15, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 16, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 17, 6);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 18, 7);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 19, 8);
INSERT INTO `rally`.`MoveCardsCompleteList` (`SetID`, `CardID`, `CardTypeID`) VALUES (4, 20, 9);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`CurrentGameData`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('GameType', 0, '', 'Game', 1);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('Turn', 0, NULL, 'Status', 2);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('Phase', 0, NULL, 'Status', 3);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('Command', 0, NULL, 'x', 4);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('SubCommand', 0, NULL, 'x', 5);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('LaserDamage', 0, NULL, 'Game', 6);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('TotalFlags', 0, NULL, 'Game', 7);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('RobotsActive', 0, NULL, 'Toggle', 8);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('IsRunning', 0, NULL, 'Toggle', 9);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('GameState', 0, 'State Text', 'Status', 10);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('ProgramsReady', 0, NULL, 'Status', 11);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('RobotsReady', 0, NULL, 'Status', 12);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('CommandParameter', 0, NULL, 'Status', 13);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('LastUpdateTime', 0, '1/1/70', 'Status', 14);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('PhaseCount', 5, NULL, 'Game', 16);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('MaxDamage', 10, NULL, 'Game', 17);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('BoardCols', 1, NULL, 'Game', 18);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('BoardRows', 1, NULL, 'Game', 19);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('BoardID', 1, NULL, 'Game', 20);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('OptionCount', -1, NULL, 'Game', 22);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('Players', 6, NULL, 'Game', 23);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('GameDataID', 1, NULL, 'Config', 26);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('PlayerListID', 1, NULL, 'Config', 25);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('RulesVersion', 2, NULL, 'Config', 27);
INSERT INTO `rally`.`CurrentGameData` (`sKey`, `iValue`, `sValue`, `Category`, `iKey`) VALUES ('Message', 0, 'Status Message', 'Status', 28);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`CommandLookup`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (0, 'Board Dimension', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (1, 'Square Location', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (2, 'Square Template', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (3, 'Player Location', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (11, 'None', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (12, 'Move', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (13, 'Rotate', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (14, 'Damage', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (15, 'Archive', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (16, 'Flag', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (17, 'Deal Option', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (18, 'Block Direction (wall)', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (19, 'Player Start', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (10, 'Unknown', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (55, 'Water', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (20, 'Dead', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (21, 'Robot Push', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (22, 'Set Lives', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (23, 'Explosive Damage', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (30, 'Phase Start', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (31, 'Phase Step', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (32, 'Phase End', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (40, 'Log data', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (41, 'Game Winner', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (42, 'Play Card', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (49, 'Begin Board Effects', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (50, 'Pushed Move', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (51, 'Pushed Move Rotate', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (52, 'Board Move', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (53, 'Board Move Rotate', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (54, 'Board Rotate', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (56, 'Deleted Move', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (57, 'Start Bot Move', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (58, 'Stop Bot Move', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (61, 'Randomizer', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (70, 'BT Connect', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (71, 'BT Disconnect', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (60, 'Fire Cannon', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (62, 'Grab Flag', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (43, 'Play Option Card', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (80, 'Mine', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (81, 'Lay Bridge', 0);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (24, 'Deal Move Card', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (90, 'Test Python', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (89, 'Enable Robots', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (63, 'Set Player Status', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (64, 'Damage Points', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (65, 'Deal Option', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (66, 'Destroy Option', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (67, 'Set Option Count', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (82, 'SetShutdownMode', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (83, 'Touch Flag', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (84, 'TouchKotHFlag', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (85, 'TouchLastManFlag', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (95, 'End Of Game', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (96, 'Delete Robot', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (97, 'Set Game State', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (98, 'Shut Down Game', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (68, 'Set Damage Points', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (69, 'Set Energy', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (73, 'Deal Spam Card', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (91, 'Set Current Game Data', 1);
INSERT INTO `rally`.`CommandLookup` (`CommandTypeID`, `CommandTypeDescription`, `CommandEnabled`) VALUES (92, 'Set Button Text', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`CommandStatusLookup`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (0, 'Unknown', 'ffaaaa');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (1, 'Waiting', 'ffaaff');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (2, 'Ready', '00ff00');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (3, 'Script Command', 'aaffaa');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (4, 'In Progress', 'ffff00');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (5, 'Script Complete', 'ffffaa');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (6, 'Complete', 'aaaaaa');
INSERT INTO `rally`.`CommandStatusLookup` (`StatusID`, `StatusDescription`, `StatusColor`) VALUES (7, 'Connecting', 'ff0000');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`GameState`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (0, 0, 'New Game', 1, 0, 0, '00ff00', 'Start Game');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (1, 1, 'Set Start Positions', 0, 1, 1, 'f0f0f0', '[wait for positions]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (2, 2, 'Next Turn', 1, 0, 1, '00ff00', 'Next Turn');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (3, 3, 'Verify Positions', 1, 0, 0, 'ff8888', 'Verify Positions');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (4, 3, 'Program Robots', 1, 1, 0, 'ffff00', '[wait for programs]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (5, 3, 'Execute Turn', 1, 0, 1, '00ff00', 'Execute Turn');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (6, 6, 'Executing...', 0, 1, 1, 'f0f0f0', '[wait for execute]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (7, 7, 'Run Phase', 1, 0, 0, '00ff00', 'Run Phase:[phase]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (8, 8, 'Running...', 0, 1, 0, 'f0f0f0', '[running]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (10, 8, 'Remove Robot', 1, 0, 0, 'ff0000', 'Remove [robotID]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (9, 6, 'Continue Running', 0, 0, 1, 'ffff00', 'Continue');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (12, 8, 'End of game', 1, 0, 0, '8888ff', 'End of Game');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (11, 8, 'Game Winner', 1, 0, 0, '8888ff', 'Winner [robotID]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (13, 14, 'Exit Game', 1, 0, 0, '8888ff', 'Shut Down Robots');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (14, 1, '[run exit]', 0, 0, 0, '8888ff', '[run exit]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (15, 3, 'Create Programs', 0, 1, 0, '88ff88', 'Generate Programs');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (16, 3, 'Restore Positions', 1, 0, 0, 'ff0000', 'Restore');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (17, 17, 'C# Failed', 1, 0, 0, 'ff0000', 'System Crashed');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (18, 8, 'Lay Bridge', 1, 0, 0, 'ffff00', 'Bridge before [robotID]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (19, 8, 'Lay Mine', 1, 0, 0, 'ffff00', 'Mine at [robotID]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (20, 8, 'Lay Big One', 1, 0, 0, 'ffff00', 'Big One at [robotID]');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (21, 21, 'Load XML Boards', 1, 0, 0, '0000ff', 'Load XML Boards');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (22, 22, 'Test Board Save', 1, 0, 0, 'ff0000', 'Test Load Save');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (23, 0, 'Reset Board', 1, 0, 0, '88ff88', 'Reset Board');
INSERT INTO `rally`.`GameState` (`GameStateID`, `NextGameStateID`, `GameStateDescription`, `WaitForUser`, `AutoRefresh`, `Continue`, `BGColor`, `ButtonText`) VALUES (24, 7, 'Test Run PTO', 0, 1, 1, '0000ff', 'Test PTO');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`BluetoothDongles`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`BluetoothDongles` (`DongleID`, `DongleMAC`, `Active`) VALUES (0, '00:0C:78:33:50:8E', 1);
INSERT INTO `rally`.`BluetoothDongles` (`DongleID`, `DongleMAC`, `Active`) VALUES (1, '00:0C:78:33:DE:E6', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`GameData`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (1, 0, 2, 1, '../Boards/TST-9x9-2p.srx', 'Default', '1', 5, 4, 4, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (2, 0, 4, 1, '-', 'Default', '2', 5, 1, 1, -1, 1, 2, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (3, 0, 4, 1, '-', 'Default', '3', 5, 1, 1, -1, 1, 3, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (4, 0, 4, 1, '-', 'Default', '4', 5, 1, 1, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (5, 0, 4, 1, '-', 'Default', '5', 5, 1, 1, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (6, 0, 4, 1, '-', 'Default', '6', 5, 1, 1, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (7, 0, 4, 1, '-', 'Default', '7', 5, 1, 1, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (8, 0, 4, 1, '-', 'Default', '8', 5, 1, 1, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (9, 0, 4, 1, '-', 'Default', '9', 5, 1, 1, -1, 1, 1, 1);
INSERT INTO `rally`.`GameData` (`GameDataID`, `GameType`, `TotalFlags`, `LaserDamage`, `BoardName`, `Description`, `GameCode`, `PhaseCount`, `BoardCols`, `BoardRows`, `OptionCount`, `BoardID`, `PlayerListID`, `RulesVersion`) VALUES (10, 0, 4, 1, '-', 'Default', '10', 5, 1, 1, -1, 1, 1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`RobotDirections`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotDirections` (`DirID`, `DirDescription`, `ShortDirDesc`, `NextDirection`) VALUES (0, 'None', '-', 1);
INSERT INTO `rally`.`RobotDirections` (`DirID`, `DirDescription`, `ShortDirDesc`, `NextDirection`) VALUES (1, 'Up', '^', 2);
INSERT INTO `rally`.`RobotDirections` (`DirID`, `DirDescription`, `ShortDirDesc`, `NextDirection`) VALUES (2, 'Right', '&gt;', 3);
INSERT INTO `rally`.`RobotDirections` (`DirID`, `DirDescription`, `ShortDirDesc`, `NextDirection`) VALUES (3, 'Down', 'V', 4);
INSERT INTO `rally`.`RobotDirections` (`DirID`, `DirDescription`, `ShortDirDesc`, `NextDirection`) VALUES (4, 'Left', '&lt;', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`OperatorData`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 1, 'P1', 0, 1, 1, '0001', 1, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 2, 'P2', 0, 2, 1, '0002', 2, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 3, 'P3', 0, 3, 1, '0003', 3, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 4, 'P4', 0, 4, 1, '0004', 4, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 5, 'P5', 0, 5, 1, '0005', 6, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 6, 'P6', 0, 6, 1, '0006', 5, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 7, 'P7', 0, 7, 1, '0007', NULL, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 8, 'P8', 0, 8, 1, '0008', NULL, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 9, 'P9', 0, 9, 1, '0009', NULL, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (1, 10, 'P10', 0, 10, 1, '0010', NULL, NULL);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (2, 1, 'P1', 0, 1, 1, '0001', 1, 1);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (2, 2, 'P2', 0, 2, 1, '0002', 2, 2);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (2, 3, 'P3', 0, 3, 1, '0003', 6, 3);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (2, 4, 'P4', 0, 4, 1, '0004', 5, 4);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (2, 5, 'P5', 0, 6, 1, '0005', 4, 5);
INSERT INTO `rally`.`OperatorData` (`OperatorListID`, `RobotID`, `OperatorName`, `Paid`, `RobotBodyID`, `IsActive`, `Password`, `PlayerSeat`, `StartPosition`) VALUES (2, 6, 'P6', 0, 7, 1, '0006', 3, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`Options`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (1, 'Ablative Coat ([quantity])', 'Your robot is now covered with a special coat that takes 3 points of damage from any direction or source. Discard after your robot takes a total of 3 points of damage.', 'When you die you will lose this option as it tries to take damage', 1, 3, -1, -1, 0, 0, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (2, 'Abort Switch', 'Instead of revealing a program card- ignore it and draw a new one randomly from the deck. Once switch is activated- draw program cards randomly from the deck for the remainder of the turn.', '', 9, -2, 0, -1, 0, 1, 0);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (3, 'Big Gun ([quantity])', 'You may fire the Big Gun instead of firing your robot\'s main laser. The Big Gun causes 2 points of damage in addition to pushing your robot back 1 square.', '', 8, 5, 2, -1, 0, 2, 1);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (4, 'Big Jet', 'When activated- your robot flies forward 8 squares before landing and executing its program. The Big Jet allows you to fly over walls and other robots. Your robot takes 2 points of damage when it lands.', '', 2, 1, 0, -1, 0, 3, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (5, 'Bio Option', 'When you receive this option- immediately take another option and place it on Bio Option. Each time your robot powers down- discard the other option and draw another. If you exchange either Bio Option or the other option to prevent damage- discard both options (does not apply if Bio Option variant is used).', '', 0, -1, 0, -1, 0, 9, 1);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (6, 'Brakes', 'Your robot may now choose to move zero when it is executing a Move 1. Priority is that of the Move 1.', 'This option is Turn Programmed- not Runtime', 2, -2, 0, -1, 0, 3, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (7, 'Bridge Layer ([quantity])', 'When activated- place a bridge token in the square in front of your robot. Treat robots moving over this square as if they were moving over open floor.', '', 2, 2, 0, 9, 0, 4, 7);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (8, 'Buzz Bomb ([quantity])', 'When activated (and each turn until the buzz bomb explodes)- take five program cards and use them to program the buzz bomb. If the bomb hits a robot or a wall- the bomb explodes.', '', 0, 3, 4, -1, 0, 6, 0);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (9, 'Circuit Breaker', 'Any time your robot ends a turn with 3 or more points of damage- it will automatically begin the next turn powered down.', '', 1, -2, 3, -1, 0, 0, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (10, 'Conditional', 'After programming all five registers- you may place one of the remaining program cards on this option. This conditional program may then be substituted for any program card in your registers before cards for that phase are revealed. Discard the conditional program at the end of the turn- but keep this option.', '', 9, -1, 0, -1, 0, 1, 0);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (11, 'Converter', 'When your robot is damaged- place an energy counter on this option instead of taking a damage chit. When your robot executes its next movement card- remove an energy counter and move 1 extra square. If there are more than two counters on this option at any time- it explodes for 2 points of damage.', '', 1, -1, 2, -1, 0, 0, 7);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (12, 'Crab Legs', 'You may place a Move 1 in the same register as a Rotate Left or Rotate Right card- and during that phase your robot will move 1 square to the left or right- respectively- without rotating.', '', 7, -1, 0, -1, 0, 3, 6);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (13, 'Double Barrel Laser', 'Your robot\'s main laser has been modified to fire two shots. May be used with {Fire Control} and/or {High Power Laser.}', '', 1, -1, 1, -1, 0, 7, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (14, 'Drone Launcher ([quantity])', 'You may launch a drone instead of firing your robot\'s main laser. Drones fly 3 squares toward the target robot each register phase- and explode for 2 points of damage in addition to pushing the target robot back 1 square. Priority of drones: 880- 870- 860.', '', 8, 3, 2, -1, 0, 2, 0);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (15, 'Dual Processor', 'You may place both a movement and a rotate program card in a single register.When executing the movement card- move one square less and then execute the rotate card. If the rotate card is a U-Turn- move two squares less.', '', 7, -1, 0, -1, 0, 3, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (16, 'Extra Memory ([quantity])', 'Your robot receives one extra program card per turn. This option does not prevent your robot from being destroyed when it has reached 10 points of damage.', '', 1, 1, 0, -1, 0, 0, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (17, 'Fire Control', 'You have targeting control of your robot\'s main laser. When scoring a point of damage- you may choose to use the damage to lock a register or destroy a particular option.', '', 9, -1, 0, -1, 0, 7, 0);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (18, 'Flywheel', 'After programming all five registers- you may place one of the remaining movement cards on this option. In a subsequent turn that card may be added to the program cards dealt to you. For example- this gives an undamaged robot 10 program cards (9 normal and 1 from the flywheel).', '', 5, -1, 0, -1, 0, 6, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (19, 'Fourth Gear', 'Your robot may now choose to move forward 4 squares when it is executing a Move 3. Priority is that of the Move 3.', 'This option is Phase Programmed- not Runtime', 2, -2, 0, -1, 0, 1, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (20, 'Frog Legs', 'You may now treat your robot as if it were flying when it is executing a Move 2 or Move 3. This option cannot be activated while your robot is flying.', 'This option is Phase Programmed- not Runtime', 2, -2, 0, -1, 0, 1, 6);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (21, 'Goo Dropper ([quantity])', 'When activated- place a goo token in your robots square. If a robot passes over or stops on the goo- the robot cannot leave that square until it attempts to move a total of four squares in any direction.', '', 2, 3, 0, 9, 0, 4, 4);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (22, 'Gyroscopic Stabilizer', 'On any turn you choose to activate this option- your robot is not rotated by gears or conveyor belts.', '', 4, -2, 0, -1, 0, 6, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (23, 'High Power Laser', 'Your robot\'s main laser has been modified to shoot through one wall or robot to reach a target robot. If you shoot through a robot- that robot also receives damages. May be used with {Fire Control} and/or {Double Barrel Laser}.', '', 1, -2, 0, -1, 0, 7, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (24, 'Homing Device', '1) You may place a homing device token on a target robot instead of firing your robot\'s main laser. 2) When activated- ignore your hand and move forward 3 squares during each register phase if doing so will bring you closer to the target robot. Otherwise- rotate right.', '', 8, -1, 0, -1, 0, 9, 1);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (25, 'Interceptor', 'You may place an intercept token on a target robot instead of firing your robot\'s main laser. After cards are dealt on subsequent turns- you may choose to exchange cards with the player whose robot has your intercept token. Take the intercept token back.', '', 8, -1, 0, -1, 0, 2, 1);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (26, 'Mechanical Arm', 'Any time your robot ends a register phase on one of the four squares bordering a checkpoint- it may use the mechanical arm to \"tag\" the checkpoint. A wall will block the arm- but another robot on the checkpoint will not.', 'This option is Enabled or disabled for Each Phase- not Runtime.', 2, -2, 0, -1, 0, 1, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (27, 'Mine Layer ([quantity])', 'When activated- place a mine token in your robot\'s square. If a robot passes over or stops on the mine- the mine explodes.', '', 2, 3, 4, 9, 0, 4, 7);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (28, 'Mini Howitzer ([quantity])', 'You now have the option of firing a mini howitzer instead of your main laser. The mini howitzer will cause 1 point of damage in addition to pushing the target robot 1 square away from you. After 5 shots- discard this option.', '', 8, 5, 0, -1, 0, 2, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (29, 'Missile Launcher ([quantity])', 'You may launch a missile instead of firing your robot\'s main laser. When launched- place the missile in your robot\'s square. During each subsequent phase- move the missile forward 2 squares. Priority of missiles: 735- 725- 715.', '', 8, 3, 4, -1, 0, 2, 1);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (30, 'Option Damping Field', 'When activated- all options(except this one) within a 3-square radius of your robot are deactivated or cannot be used. Devices already released by options continue to function normally.', '', 2, -2, 0, -1, 0, 6, 7);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (31, 'Overload Override', 'You may place two program cards in a single register and execute both in that register phase- or you may leave a register unprogrammed. Your robot takes a point of damage each time this option is used.', '', 7, -2, 0, -1, 0, 3, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (32, 'Portable Teleporter ([quantity])', 'When activated- place a portable teleporter token in your robot\'s square. Treat the portable teleporter as if it were a teleporter board element.', '', 2, 1, 0, 9, 0, 4, 4);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (33, 'Power Down Shield', 'When your robot powers down- a shield comes out on each of the robot\'s four sides. Each shield protects the robot from 1 point of damage per register phase. When the robot powers up- the shields retract.', '', 1, -2, 0, -1, 0, 0, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (34, 'Presser Beam', 'You now have the option of firing a presser beam instead of your robot\'s main laser. The presser beam will push a target robot 1 squares away from you.', '', 8, -1, 0, -1, 0, 2, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (35, 'Proximity Mine ([quantity])', 'When activated- place a proximity mine token in your robot\'s square. If a robot passes within 1 square of the mine- the mine explodes.', '', 2, 3, 4, 9, 0, 4, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (36, 'Radio Control', 'You now have the option of using a radio control beam instead of your robot\'s main laser. The radio control beam can only target a robot within 6 squares- and it replaces that robot\'s entire program with a copy of your robot\'s program. In cases of card priority- the target robot moves after your robot.', '', 8, -2, 0, -1, 0, 2, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (37, 'Ramming Gear', 'When your robot pushes another robot- that robot receives a point of damage in addition to being pushed. Even if the target robot can\'t be moved- it still receives a point of damage.', '', 1, -2, 0, -1, 0, 8, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (38, 'Rear Laser', 'Your robot has a rear-firing laser in addition to its main laser.', 'The turret will also affect the direction of the rear laser', 1, -2, 0, -1, 0, 8, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (39, 'Recompile', 'You may receive a new hand once per turn before your robot is programmed. Your robot takes a point of damage after you receive the new hand.', 'Your robot will take 1 point of damage BEFORE you receive your new hand.  You must Enable Recompile and submit your hand and you will receive a new hand.', 10, -2, 1, -1, 0, 6, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (40, 'Re-engineering Unit', 'When your robot pushes another robot- you may exchange this option for an option on the other robot.', '', 8, -1, 0, -1, 0, 1, 0);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (41, 'Reflector ([direction])', 'When your robot is hit by a laser- your robot takes damages and the laser is reflected back to its source. Program the direction the reflector faces by turning this card to indicate front- back- right or left.', '', 6, -2, 0, -1, 0, 6, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (42, 'Retro-Rockets ([quantity])', 'When activated- your robot flies back 2 squares per fuel token before executing its program.', '', 2, 3, 0, -1, 0, 3, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (43, 'Reverse Gears', 'Your robot may now choose to back up 2 squares when it is executing a Back-Up. Priority is that of the Back-Up.', 'This option is Turn Programmed- not Runtime', 2, -2, 0, -1, 0, 1, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (44, 'Robo Copter ([quantity])', 'Program by placing an unused movement card on this option. During each register phase- execute the movement card and then execute your program card. While robo copter is active- your robot is flying.', 'This option may only be used once', 4, 1, 0, -1, 0, 6, 7);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (45, 'Scrambler', 'You now have the option of firing a scrambler instead of your robot\'s main laser. The scrambler allows you to replace the next programmed card of a target robot with a random one from the deck. This option cannot be used on the fifth register phase.', '', 8, -2, 0, -1, 0, 2, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (46, 'Scrambler Bomb ([quantity])', 'When activated- place a scrambler token in your robot\'s square. At the beginning of the next turn- all robots within 6 squares of the bomb execute program cards at random for the entire turn.', '', 2, 1, 0, 9, 0, 4, 4);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (47, 'Self-Destruct ([quantity])', 'Program by placing this card in a register. The option will be destroyed at the beginning of that register phase. If destroyed or exchanged to prevent damage- this option explodes.', '', 3, 1, 16, -1, 0, 5, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (48, 'Shield ([direction])', 'Your robot now has a shield that protects the robot from 1 point of damage per register phase. Program the direction the shield faces by turning this card to indicate front- back- right or left.', '', 6, -2, 0, -1, 0, 6, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (49, 'Superior Archive Copy', 'You may withdraw your next archive copy undamaged- even if you discard this option when you robot is destroyed.', '', 1, -2, 0, -1, 0, 0, 9);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (50, 'The Big One ([quantity])', 'When activated- place a Big One token in your robot\'s square. At the beginning of the next turn- The Big One explodes.', '', 3, 1, 64, -1, 0, 4, 7);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (51, 'Tractor Beam', 'You now have the option of firing a tractor beam instead of your robot\\\'s main laser. The tractor beam will pull a target robot 1 square toward you. The beam may not be used if the target robot is in an adjacent square.', '', 8, -2, 0, -1, 0, 2, 5);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (52, 'Turret ([direction])', 'Your robot now has a turret for its main laser and optional weapons. Program the direction the turret faces by turning this card to indicate front- back- right or left.', 'The turret will also affect the direction of the rear laser', 6, -2, 0, -1, 0, 6, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (53, 'Explosive Laser ([quantity])', 'Your robot has an optional Explosive Laser.  When fired, target robot will receive 2 points of explosive damage.', 'Custom SRR Option', 4, 2, 2, -1, 0, 4, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (55, 'Point Sucker', 'When your robot fires it\'s main laser, you can remove points from the target', 'Custom SRR Option', 2, 1, 0, -7, 0, 0, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (56, 'EMP ([quantity])', 'When activated, your robot will transmit an EMP before Phase 1, locking in your program and clearing the programs for all other robots.  Your robot will play out its program, then reset for one turn to clear the locked program.  No damage will be added or cleared by the EMP.', 'Custom SRR Option', 4, 1, 0, -1, 0, 0, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (57, 'Damage Eraser ([quantity])', 'Before Phase 1, all damage is erased from your robot', 'Custom SRR Option', 4, 1, 0, -1, 0, 0, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (58, 'Reboot', 'Your robot will immediately shut down and repair all damage', 'Custom SRR Option', 10, -1, 0, -1, 0, 0, 8);
INSERT INTO `rally`.`Options` (`OptionID`, `Name`, `Text`, `SRR_Text`, `EditorType`, `Quantity`, `Damage`, `ActionSequence`, `CurrentOrder`, `OptType`, `Functional`) VALUES (59, 'Additional Laser ([quantity])', 'Your robot\'s main laser has been modified to fire an additional shot. May be used with {Fire Control} and/or {High Power Laser.}', 'Custom SRR Option', 1, 1, 0, -1, 0, 0, 8);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`GameTypes`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (0, 'Standard', 1, 5, 0);
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (1, 'King of the Hill', 0, 5, 0);
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (2, '10 Turn', 0, 1, 0);
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (3, 'Standard 23', 1, 5, 1);
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (4, 'Capture the Flag', NULL, NULL, NULL);
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (5, 'Musical Chairs', NULL, NULL, NULL);
INSERT INTO `rally`.`GameTypes` (`GameType`, `Description`, `LaserDamage`, `PhaseCount`, `RuleVersion`) VALUES (6, 'Standard V2', NULL, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`PhaseCounter`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`PhaseCounter` (`ID`) VALUES (1);
INSERT INTO `rally`.`PhaseCounter` (`ID`) VALUES (2);
INSERT INTO `rally`.`PhaseCounter` (`ID`) VALUES (3);
INSERT INTO `rally`.`PhaseCounter` (`ID`) VALUES (4);
INSERT INTO `rally`.`PhaseCounter` (`ID`) VALUES (5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`Boards`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`Boards` (`BoardID`, `BoardName`, `X`, `Y`, `GameType`, `Players`, `TotalFlags`, `LaserDamage`, `PhaseCount`, `RulesVersion`) VALUES (1, '../Boards/TST-9x9-2p.srx', 0, 0, 0, 0, 0, 0, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`BoardItems`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 0, 0, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 0, 1, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 0, 2, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 1, 0, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 1, 1, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 1, 2, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 2, 0, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 2, 1, 0, 0);
INSERT INTO `rally`.`BoardItems` (`BoardID`, `X`, `Y`, `SquareType`, `Rotation`) VALUES (10, 2, 2, 0, 0);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`BoardItemActions`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 10, 12, 3, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 11, 12, 3, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 11, 13, 4, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 12, 12, 3, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 12, 13, 4, 31, 2);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 20, 12, 1, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 20, 12, 3, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 21, 12, 1, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 21, 13, 2, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 21, 12, 3, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 21, 13, 4, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 22, 12, 1, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 22, 13, 2, 31, 2);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 22, 12, 3, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 22, 13, 4, 31, 2);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 31, 13, 4, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 32, 13, 4, 31, 2);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 40, 14, 0, 0, 100);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 41, 14, 0, 32, 100);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 42, 14, 0, 0, 100);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 43, 14, 0, 0, 100);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 50, 12, 5, 32, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 55, 55, 0, 32, 0);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 60, 14, 6, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 70, 14, 7, 32, 100);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 80, 14, 7, 32, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 90, 14, 7, 16, -1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 90, 15, 8, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 91, 14, 7, 16, -1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 91, 15, 8, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 91, 17, 9, 16, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 100, 14, 7, 16, -1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 100, 15, 8, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 100, 100, 10, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 100, 19, 1, 31, 10);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 110, 14, 7, 16, -1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 110, 15, 8, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 110, 19, 1, 31, 1);
INSERT INTO `rally`.`BoardItemActions` (`BoardID`, `X`, `Y`, `SquareAction`, `ActionSequence`, `Phase`, `Parameter`) VALUES (0, 0, 200, 18, 0, 31, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`StatusLEDs`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`StatusLEDs` (`LEDID`, `R`, `G`, `B`, `Sort`, `Brightness`, `Color`) VALUES (1, 1, 1, 1, 1, 100, 'FFFFFF');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`BoardSquares`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (0, 'Blank', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (10, 'Normal Belt', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (11, 'Normal Turn CW', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (12, 'Normal Turn CCW', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (20, 'Fast Belt', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (21, 'Fast Turn CW', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (22, 'Fast Turn CCW', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (31, 'Gear CW (G)', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (32, 'Gear CCW (R)', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (40, 'Pit', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (41, 'Trap Door', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (42, 'Edge', 0, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (43, 'Corner Edge', 0, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (50, 'Pusher', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (55, 'Water', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (60, 'Cannon', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (61, 'Randomizer', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (70, 'Crusher', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (80, 'Flamer', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (90, 'Wrench', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (91, 'Wrench Hammer', 1, NULL, NULL, 0);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (100 , 'Flag', 1, 16, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (110, 'Start Square', 1, 19, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (200, 'Blank Wall', 1, NULL, NULL, 1);
INSERT INTO `rally`.`BoardSquares` (`ID`, `Name`, `Show`, `ShowParameterID`, `Filename`, `Rotation`) VALUES (105, 'King', 1, NULL, NULL, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`CommandCategories`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (1, 'Robot wReply', 1, 0, 0);
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (2, 'Robot No Reply', 1, 0, 0);
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (3, 'DB', 0, 1, 0);
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (4, 'PI', 0, 0, 1);
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (5, 'Node ', 0, 0, 0);
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (6, 'User Input', 0, 0, 0);
INSERT INTO `rally`.`CommandCategories` (`CommandCatID`, `Description`, `RobotCommand`, `DBCommand`, `PiCommand`) VALUES (7, 'Connection', 1, 0, 0);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`SeatOrientation`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (1, 1);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (2, 1);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (3, 1);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (4, 2);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (5, 2);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (6, 3);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (7, 3);
INSERT INTO `rally`.`SeatOrientation` (`SeatID`, `Direction`) VALUES (8, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`MoveCardLocations`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`MoveCardLocations` (`LocationID`, `Description`, `DealPriority`) VALUES (0, 'Deck', 3);
INSERT INTO `rally`.`MoveCardLocations` (`LocationID`, `Description`, `DealPriority`) VALUES (1, 'Hand', 2);
INSERT INTO `rally`.`MoveCardLocations` (`LocationID`, `Description`, `DealPriority`) VALUES (2, 'Played', 5);
INSERT INTO `rally`.`MoveCardLocations` (`LocationID`, `Description`, `DealPriority`) VALUES (3, 'Discard', 4);
INSERT INTO `rally`.`MoveCardLocations` (`LocationID`, `Description`, `DealPriority`) VALUES (4, 'Locked', 1);
INSERT INTO `rally`.`MoveCardLocations` (`LocationID`, `Description`, `DealPriority`) VALUES (5, 'Played Spam', 5);

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`RobotCommands`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (1, 0, 'Move Back');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (1, 1, 'Move 0');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (1, 2, 'Move 1');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (1, 3, 'Move 2');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (1, 4, 'Move 3');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (2, 0, 'Turn Left');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (2, 1, 'Turn 0');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (2, 2, 'Turn Right');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (2, 3, 'U-Turn');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 2, 'LED Laser');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 0, 'PTO Off');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 1, 'PTO On');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 4, 'Damaged');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 5, 'Flag');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 6, 'Active Option');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 7, 'Game Winner');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 8, 'Dead');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (3, 9, 'Set Energy');
INSERT INTO `rally`.`RobotCommands` (`CommandType`, `Value`, `Description`) VALUES (4, 0, 'Set Shut Down');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`GameCommandList`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`GameCommandList` (`CommandID`, `CommandTiming`, `CommandTypeID`, `Description`) VALUES (1, 1, 94, 'Load Robot Connections');
INSERT INTO `rally`.`GameCommandList` (`CommandID`, `CommandTiming`, `CommandTypeID`, `Description`) VALUES (2, 2, 94, 'Start Game (Connect)');
INSERT INTO `rally`.`GameCommandList` (`CommandID`, `CommandTiming`, `CommandTypeID`, `Description`) VALUES (3, 2, 36, 'Setup Game');
INSERT INTO `rally`.`GameCommandList` (`CommandID`, `CommandTiming`, `CommandTypeID`, `Description`) VALUES (4, 3, 37, 'Setup Turn');
INSERT INTO `rally`.`GameCommandList` (`CommandID`, `CommandTiming`, `CommandTypeID`, `Description`) VALUES (5, 5, 95, 'End of game');
INSERT INTO `rally`.`GameCommandList` (`CommandID`, `CommandTiming`, `CommandTypeID`, `Description`) VALUES (6, 5, 94, 'Disconnect ');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`GameCommandTiming`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`GameCommandTiming` (`TimingID`, `Description`) VALUES (1, 'Robot Connection (each restart)');
INSERT INTO `rally`.`GameCommandTiming` (`TimingID`, `Description`) VALUES (2, 'Start of game');
INSERT INTO `rally`.`GameCommandTiming` (`TimingID`, `Description`) VALUES (3, 'Each Turn');
INSERT INTO `rally`.`GameCommandTiming` (`TimingID`, `Description`) VALUES (4, 'Each Phase');
INSERT INTO `rally`.`GameCommandTiming` (`TimingID`, `Description`) VALUES (5, 'End of Game/Disconnect');

COMMIT;


-- -----------------------------------------------------
-- Data for table `rally`.`RobotMessages`
-- -----------------------------------------------------
START TRANSACTION;
USE `rally`;
INSERT INTO `rally`.`RobotMessages` (`MessageID`, `Message`) VALUES (0, NULL);
INSERT INTO `rally`.`RobotMessages` (`MessageID`, `Message`) VALUES (1, 'Validate Position');
INSERT INTO `rally`.`RobotMessages` (`MessageID`, `Message`) VALUES (2, 'Remove Robot');
INSERT INTO `rally`.`RobotMessages` (`MessageID`, `Message`) VALUES (3, 'Next Phase');
INSERT INTO `rally`.`RobotMessages` (`MessageID`, `Message`) VALUES (4, 'Robot Direction');

COMMIT;

